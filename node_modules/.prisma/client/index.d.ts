
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user
 * 
 */
export type user = {
  id: number
  first_name: string
  last_name: string
  email: string
  password: string
  created_at: Date
}

/**
 * Model list
 * 
 */
export type list = {
  id: number
  name: string
  description: string | null
  owner_id: number
  passcode: string
  created_at: Date
}

/**
 * Model list_permission
 * 
 */
export type list_permission = {
  id: number
  list_id: number
  user_id: number
  permission: AccessLevel
  created_at: Date
}

/**
 * Model item
 * 
 */
export type item = {
  id: number
  name: string
  description: string | null
  category: Category | null
  category_id: number | null
  item_type: ItemType
  date_tz_sensitive: Date | null
  date_tz_sensitive_end: Date | null
  time_sensitive_flag: boolean
  date_range_flag: boolean
  date_tz_insensitive: string | null
  date_tz_insensitive_end: string | null
  permission_level: VisibilityLevel
  created_by_id: number
  last_modified_by_id: number
  created_at: Date
  active: boolean
}

/**
 * Model item_permission
 * 
 */
export type item_permission = {
  id: number
  item_id: number
  user_id: number
  created_at: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const AccessLevel: {
  admin: 'admin',
  public: 'public'
};

export type AccessLevel = (typeof AccessLevel)[keyof typeof AccessLevel]


export const Category: {
  list: 'list'
};

export type Category = (typeof Category)[keyof typeof Category]


export const ItemType: {
  assignment: 'assignment',
  note: 'note',
  project: 'project',
  reminder: 'reminder',
  meeting: 'meeting',
  test: 'test',
  general: 'general'
};

export type ItemType = (typeof ItemType)[keyof typeof ItemType]


export const VisibilityLevel: {
  private: 'private',
  public: 'public'
};

export type VisibilityLevel = (typeof VisibilityLevel)[keyof typeof VisibilityLevel]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.list`: Exposes CRUD operations for the **list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lists
    * const lists = await prisma.list.findMany()
    * ```
    */
  get list(): Prisma.listDelegate<GlobalReject>;

  /**
   * `prisma.list_permission`: Exposes CRUD operations for the **list_permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more List_permissions
    * const list_permissions = await prisma.list_permission.findMany()
    * ```
    */
  get list_permission(): Prisma.list_permissionDelegate<GlobalReject>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.itemDelegate<GlobalReject>;

  /**
   * `prisma.item_permission`: Exposes CRUD operations for the **item_permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Item_permissions
    * const item_permissions = await prisma.item_permission.findMany()
    * ```
    */
  get item_permission(): Prisma.item_permissionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    list: 'list',
    list_permission: 'list_permission',
    item: 'item',
    item_permission: 'item_permission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    item_permissions: number
    list_permissions: number
  }

  export type UserCountOutputTypeSelect = {
    item_permissions?: boolean
    list_permissions?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ListCountOutputType
   */


  export type ListCountOutputType = {
    list_permissions: number
    items: number
  }

  export type ListCountOutputTypeSelect = {
    list_permissions?: boolean
    items?: boolean
  }

  export type ListCountOutputTypeGetPayload<S extends boolean | null | undefined | ListCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ListCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ListCountOutputTypeArgs)
    ? ListCountOutputType 
    : S extends { select: any } & (ListCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ListCountOutputType ? ListCountOutputType[P] : never
  } 
      : ListCountOutputType




  // Custom InputTypes

  /**
   * ListCountOutputType without action
   */
  export type ListCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ListCountOutputType
     */
    select?: ListCountOutputTypeSelect | null
  }



  /**
   * Count Type ItemCountOutputType
   */


  export type ItemCountOutputType = {
    item_permissions: number
  }

  export type ItemCountOutputTypeSelect = {
    item_permissions?: boolean
  }

  export type ItemCountOutputTypeGetPayload<S extends boolean | null | undefined | ItemCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ItemCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ItemCountOutputTypeArgs)
    ? ItemCountOutputType 
    : S extends { select: any } & (ItemCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ItemCountOutputType ? ItemCountOutputType[P] : never
  } 
      : ItemCountOutputType




  // Custom InputTypes

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    email: number
    password: number
    created_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    item_permissions?: boolean | user$item_permissionsArgs
    list_permissions?: boolean | user$list_permissionsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type userInclude = {
    item_permissions?: boolean | user$item_permissionsArgs
    list_permissions?: boolean | user$list_permissionsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<S extends boolean | null | undefined | userArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? user :
    S extends undefined ? never :
    S extends { include: any } & (userArgs | userFindManyArgs)
    ? user  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'item_permissions' ? Array < item_permissionGetPayload<S['include'][P]>>  :
        P extends 'list_permissions' ? Array < list_permissionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (userArgs | userFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'item_permissions' ? Array < item_permissionGetPayload<S['select'][P]>>  :
        P extends 'list_permissions' ? Array < list_permissionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
      : user


  type userCountArgs = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): Prisma.PrismaPromise<Array<userGetPayload<T>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    item_permissions<T extends user$item_permissionsArgs= {}>(args?: Subset<T, user$item_permissionsArgs>): Prisma.PrismaPromise<Array<item_permissionGetPayload<T>>| Null>;

    list_permissions<T extends user$list_permissionsArgs= {}>(args?: Subset<T, user$list_permissionsArgs>): Prisma.PrismaPromise<Array<list_permissionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.item_permissions
   */
  export type user$item_permissionsArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    where?: item_permissionWhereInput
    orderBy?: Enumerable<item_permissionOrderByWithRelationInput>
    cursor?: item_permissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Item_permissionScalarFieldEnum>
  }


  /**
   * user.list_permissions
   */
  export type user$list_permissionsArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    where?: list_permissionWhereInput
    orderBy?: Enumerable<list_permissionOrderByWithRelationInput>
    cursor?: list_permissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<List_permissionScalarFieldEnum>
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
  }



  /**
   * Model list
   */


  export type AggregateList = {
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  export type ListAvgAggregateOutputType = {
    id: number | null
    owner_id: number | null
  }

  export type ListSumAggregateOutputType = {
    id: number | null
    owner_id: number | null
  }

  export type ListMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    owner_id: number | null
    passcode: string | null
    created_at: Date | null
  }

  export type ListMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    owner_id: number | null
    passcode: string | null
    created_at: Date | null
  }

  export type ListCountAggregateOutputType = {
    id: number
    name: number
    description: number
    owner_id: number
    passcode: number
    created_at: number
    _all: number
  }


  export type ListAvgAggregateInputType = {
    id?: true
    owner_id?: true
  }

  export type ListSumAggregateInputType = {
    id?: true
    owner_id?: true
  }

  export type ListMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    owner_id?: true
    passcode?: true
    created_at?: true
  }

  export type ListMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    owner_id?: true
    passcode?: true
    created_at?: true
  }

  export type ListCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    owner_id?: true
    passcode?: true
    created_at?: true
    _all?: true
  }

  export type ListAggregateArgs = {
    /**
     * Filter which list to aggregate.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: Enumerable<listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lists
    **/
    _count?: true | ListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListMaxAggregateInputType
  }

  export type GetListAggregateType<T extends ListAggregateArgs> = {
        [P in keyof T & keyof AggregateList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateList[P]>
      : GetScalarType<T[P], AggregateList[P]>
  }




  export type ListGroupByArgs = {
    where?: listWhereInput
    orderBy?: Enumerable<listOrderByWithAggregationInput>
    by: ListScalarFieldEnum[]
    having?: listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListCountAggregateInputType | true
    _avg?: ListAvgAggregateInputType
    _sum?: ListSumAggregateInputType
    _min?: ListMinAggregateInputType
    _max?: ListMaxAggregateInputType
  }


  export type ListGroupByOutputType = {
    id: number
    name: string
    description: string | null
    owner_id: number
    passcode: string
    created_at: Date
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  type GetListGroupByPayload<T extends ListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListGroupByOutputType[P]>
            : GetScalarType<T[P], ListGroupByOutputType[P]>
        }
      >
    >


  export type listSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    owner_id?: boolean
    passcode?: boolean
    created_at?: boolean
    list_permissions?: boolean | list$list_permissionsArgs
    items?: boolean | list$itemsArgs
    _count?: boolean | ListCountOutputTypeArgs
  }


  export type listInclude = {
    list_permissions?: boolean | list$list_permissionsArgs
    items?: boolean | list$itemsArgs
    _count?: boolean | ListCountOutputTypeArgs
  }

  export type listGetPayload<S extends boolean | null | undefined | listArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? list :
    S extends undefined ? never :
    S extends { include: any } & (listArgs | listFindManyArgs)
    ? list  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'list_permissions' ? Array < list_permissionGetPayload<S['include'][P]>>  :
        P extends 'items' ? Array < itemGetPayload<S['include'][P]>>  :
        P extends '_count' ? ListCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (listArgs | listFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'list_permissions' ? Array < list_permissionGetPayload<S['select'][P]>>  :
        P extends 'items' ? Array < itemGetPayload<S['select'][P]>>  :
        P extends '_count' ? ListCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof list ? list[P] : never
  } 
      : list


  type listCountArgs = 
    Omit<listFindManyArgs, 'select' | 'include'> & {
      select?: ListCountAggregateInputType | true
    }

  export interface listDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one List that matches the filter.
     * @param {listFindUniqueArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends listFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, listFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'list'> extends True ? Prisma__listClient<listGetPayload<T>> : Prisma__listClient<listGetPayload<T> | null, null>

    /**
     * Find one List that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {listFindUniqueOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends listFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, listFindUniqueOrThrowArgs>
    ): Prisma__listClient<listGetPayload<T>>

    /**
     * Find the first List that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listFindFirstArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends listFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, listFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'list'> extends True ? Prisma__listClient<listGetPayload<T>> : Prisma__listClient<listGetPayload<T> | null, null>

    /**
     * Find the first List that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listFindFirstOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends listFindFirstOrThrowArgs>(
      args?: SelectSubset<T, listFindFirstOrThrowArgs>
    ): Prisma__listClient<listGetPayload<T>>

    /**
     * Find zero or more Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lists
     * const lists = await prisma.list.findMany()
     * 
     * // Get first 10 Lists
     * const lists = await prisma.list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listWithIdOnly = await prisma.list.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends listFindManyArgs>(
      args?: SelectSubset<T, listFindManyArgs>
    ): Prisma.PrismaPromise<Array<listGetPayload<T>>>

    /**
     * Create a List.
     * @param {listCreateArgs} args - Arguments to create a List.
     * @example
     * // Create one List
     * const List = await prisma.list.create({
     *   data: {
     *     // ... data to create a List
     *   }
     * })
     * 
    **/
    create<T extends listCreateArgs>(
      args: SelectSubset<T, listCreateArgs>
    ): Prisma__listClient<listGetPayload<T>>

    /**
     * Create many Lists.
     *     @param {listCreateManyArgs} args - Arguments to create many Lists.
     *     @example
     *     // Create many Lists
     *     const list = await prisma.list.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends listCreateManyArgs>(
      args?: SelectSubset<T, listCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a List.
     * @param {listDeleteArgs} args - Arguments to delete one List.
     * @example
     * // Delete one List
     * const List = await prisma.list.delete({
     *   where: {
     *     // ... filter to delete one List
     *   }
     * })
     * 
    **/
    delete<T extends listDeleteArgs>(
      args: SelectSubset<T, listDeleteArgs>
    ): Prisma__listClient<listGetPayload<T>>

    /**
     * Update one List.
     * @param {listUpdateArgs} args - Arguments to update one List.
     * @example
     * // Update one List
     * const list = await prisma.list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends listUpdateArgs>(
      args: SelectSubset<T, listUpdateArgs>
    ): Prisma__listClient<listGetPayload<T>>

    /**
     * Delete zero or more Lists.
     * @param {listDeleteManyArgs} args - Arguments to filter Lists to delete.
     * @example
     * // Delete a few Lists
     * const { count } = await prisma.list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends listDeleteManyArgs>(
      args?: SelectSubset<T, listDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lists
     * const list = await prisma.list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends listUpdateManyArgs>(
      args: SelectSubset<T, listUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one List.
     * @param {listUpsertArgs} args - Arguments to update or create a List.
     * @example
     * // Update or create a List
     * const list = await prisma.list.upsert({
     *   create: {
     *     // ... data to create a List
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the List we want to update
     *   }
     * })
    **/
    upsert<T extends listUpsertArgs>(
      args: SelectSubset<T, listUpsertArgs>
    ): Prisma__listClient<listGetPayload<T>>

    /**
     * Count the number of Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listCountArgs} args - Arguments to filter Lists to count.
     * @example
     * // Count the number of Lists
     * const count = await prisma.list.count({
     *   where: {
     *     // ... the filter for the Lists we want to count
     *   }
     * })
    **/
    count<T extends listCountArgs>(
      args?: Subset<T, listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListAggregateArgs>(args: Subset<T, ListAggregateArgs>): Prisma.PrismaPromise<GetListAggregateType<T>>

    /**
     * Group by List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListGroupByArgs['orderBy'] }
        : { orderBy?: ListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__listClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    list_permissions<T extends list$list_permissionsArgs= {}>(args?: Subset<T, list$list_permissionsArgs>): Prisma.PrismaPromise<Array<list_permissionGetPayload<T>>| Null>;

    items<T extends list$itemsArgs= {}>(args?: Subset<T, list$itemsArgs>): Prisma.PrismaPromise<Array<itemGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * list base type for findUnique actions
   */
  export type listFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * Filter, which list to fetch.
     */
    where: listWhereUniqueInput
  }

  /**
   * list findUnique
   */
  export interface listFindUniqueArgs extends listFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * list findUniqueOrThrow
   */
  export type listFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * Filter, which list to fetch.
     */
    where: listWhereUniqueInput
  }


  /**
   * list base type for findFirst actions
   */
  export type listFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * Filter, which list to fetch.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: Enumerable<listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lists.
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lists.
     */
    distinct?: Enumerable<ListScalarFieldEnum>
  }

  /**
   * list findFirst
   */
  export interface listFindFirstArgs extends listFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * list findFirstOrThrow
   */
  export type listFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * Filter, which list to fetch.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: Enumerable<listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lists.
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lists.
     */
    distinct?: Enumerable<ListScalarFieldEnum>
  }


  /**
   * list findMany
   */
  export type listFindManyArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * Filter, which lists to fetch.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: Enumerable<listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lists.
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    distinct?: Enumerable<ListScalarFieldEnum>
  }


  /**
   * list create
   */
  export type listCreateArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * The data needed to create a list.
     */
    data: XOR<listCreateInput, listUncheckedCreateInput>
  }


  /**
   * list createMany
   */
  export type listCreateManyArgs = {
    /**
     * The data used to create many lists.
     */
    data: Enumerable<listCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * list update
   */
  export type listUpdateArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * The data needed to update a list.
     */
    data: XOR<listUpdateInput, listUncheckedUpdateInput>
    /**
     * Choose, which list to update.
     */
    where: listWhereUniqueInput
  }


  /**
   * list updateMany
   */
  export type listUpdateManyArgs = {
    /**
     * The data used to update lists.
     */
    data: XOR<listUpdateManyMutationInput, listUncheckedUpdateManyInput>
    /**
     * Filter which lists to update
     */
    where?: listWhereInput
  }


  /**
   * list upsert
   */
  export type listUpsertArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * The filter to search for the list to update in case it exists.
     */
    where: listWhereUniqueInput
    /**
     * In case the list found by the `where` argument doesn't exist, create a new list with this data.
     */
    create: XOR<listCreateInput, listUncheckedCreateInput>
    /**
     * In case the list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<listUpdateInput, listUncheckedUpdateInput>
  }


  /**
   * list delete
   */
  export type listDeleteArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
    /**
     * Filter which list to delete.
     */
    where: listWhereUniqueInput
  }


  /**
   * list deleteMany
   */
  export type listDeleteManyArgs = {
    /**
     * Filter which lists to delete
     */
    where?: listWhereInput
  }


  /**
   * list.list_permissions
   */
  export type list$list_permissionsArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    where?: list_permissionWhereInput
    orderBy?: Enumerable<list_permissionOrderByWithRelationInput>
    cursor?: list_permissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<List_permissionScalarFieldEnum>
  }


  /**
   * list.items
   */
  export type list$itemsArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    where?: itemWhereInput
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    cursor?: itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * list without action
   */
  export type listArgs = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: listInclude | null
  }



  /**
   * Model list_permission
   */


  export type AggregateList_permission = {
    _count: List_permissionCountAggregateOutputType | null
    _avg: List_permissionAvgAggregateOutputType | null
    _sum: List_permissionSumAggregateOutputType | null
    _min: List_permissionMinAggregateOutputType | null
    _max: List_permissionMaxAggregateOutputType | null
  }

  export type List_permissionAvgAggregateOutputType = {
    id: number | null
    list_id: number | null
    user_id: number | null
  }

  export type List_permissionSumAggregateOutputType = {
    id: number | null
    list_id: number | null
    user_id: number | null
  }

  export type List_permissionMinAggregateOutputType = {
    id: number | null
    list_id: number | null
    user_id: number | null
    permission: AccessLevel | null
    created_at: Date | null
  }

  export type List_permissionMaxAggregateOutputType = {
    id: number | null
    list_id: number | null
    user_id: number | null
    permission: AccessLevel | null
    created_at: Date | null
  }

  export type List_permissionCountAggregateOutputType = {
    id: number
    list_id: number
    user_id: number
    permission: number
    created_at: number
    _all: number
  }


  export type List_permissionAvgAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
  }

  export type List_permissionSumAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
  }

  export type List_permissionMinAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
    permission?: true
    created_at?: true
  }

  export type List_permissionMaxAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
    permission?: true
    created_at?: true
  }

  export type List_permissionCountAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
    permission?: true
    created_at?: true
    _all?: true
  }

  export type List_permissionAggregateArgs = {
    /**
     * Filter which list_permission to aggregate.
     */
    where?: list_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of list_permissions to fetch.
     */
    orderBy?: Enumerable<list_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: list_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` list_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` list_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned list_permissions
    **/
    _count?: true | List_permissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: List_permissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: List_permissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: List_permissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: List_permissionMaxAggregateInputType
  }

  export type GetList_permissionAggregateType<T extends List_permissionAggregateArgs> = {
        [P in keyof T & keyof AggregateList_permission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateList_permission[P]>
      : GetScalarType<T[P], AggregateList_permission[P]>
  }




  export type List_permissionGroupByArgs = {
    where?: list_permissionWhereInput
    orderBy?: Enumerable<list_permissionOrderByWithAggregationInput>
    by: List_permissionScalarFieldEnum[]
    having?: list_permissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: List_permissionCountAggregateInputType | true
    _avg?: List_permissionAvgAggregateInputType
    _sum?: List_permissionSumAggregateInputType
    _min?: List_permissionMinAggregateInputType
    _max?: List_permissionMaxAggregateInputType
  }


  export type List_permissionGroupByOutputType = {
    id: number
    list_id: number
    user_id: number
    permission: AccessLevel
    created_at: Date
    _count: List_permissionCountAggregateOutputType | null
    _avg: List_permissionAvgAggregateOutputType | null
    _sum: List_permissionSumAggregateOutputType | null
    _min: List_permissionMinAggregateOutputType | null
    _max: List_permissionMaxAggregateOutputType | null
  }

  type GetList_permissionGroupByPayload<T extends List_permissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<List_permissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof List_permissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], List_permissionGroupByOutputType[P]>
            : GetScalarType<T[P], List_permissionGroupByOutputType[P]>
        }
      >
    >


  export type list_permissionSelect = {
    id?: boolean
    list?: boolean | listArgs
    list_id?: boolean
    user?: boolean | userArgs
    user_id?: boolean
    permission?: boolean
    created_at?: boolean
  }


  export type list_permissionInclude = {
    list?: boolean | listArgs
    user?: boolean | userArgs
  }

  export type list_permissionGetPayload<S extends boolean | null | undefined | list_permissionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? list_permission :
    S extends undefined ? never :
    S extends { include: any } & (list_permissionArgs | list_permissionFindManyArgs)
    ? list_permission  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'list' ? listGetPayload<S['include'][P]> :
        P extends 'user' ? userGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (list_permissionArgs | list_permissionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'list' ? listGetPayload<S['select'][P]> :
        P extends 'user' ? userGetPayload<S['select'][P]> :  P extends keyof list_permission ? list_permission[P] : never
  } 
      : list_permission


  type list_permissionCountArgs = 
    Omit<list_permissionFindManyArgs, 'select' | 'include'> & {
      select?: List_permissionCountAggregateInputType | true
    }

  export interface list_permissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one List_permission that matches the filter.
     * @param {list_permissionFindUniqueArgs} args - Arguments to find a List_permission
     * @example
     * // Get one List_permission
     * const list_permission = await prisma.list_permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends list_permissionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, list_permissionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'list_permission'> extends True ? Prisma__list_permissionClient<list_permissionGetPayload<T>> : Prisma__list_permissionClient<list_permissionGetPayload<T> | null, null>

    /**
     * Find one List_permission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {list_permissionFindUniqueOrThrowArgs} args - Arguments to find a List_permission
     * @example
     * // Get one List_permission
     * const list_permission = await prisma.list_permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends list_permissionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, list_permissionFindUniqueOrThrowArgs>
    ): Prisma__list_permissionClient<list_permissionGetPayload<T>>

    /**
     * Find the first List_permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {list_permissionFindFirstArgs} args - Arguments to find a List_permission
     * @example
     * // Get one List_permission
     * const list_permission = await prisma.list_permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends list_permissionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, list_permissionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'list_permission'> extends True ? Prisma__list_permissionClient<list_permissionGetPayload<T>> : Prisma__list_permissionClient<list_permissionGetPayload<T> | null, null>

    /**
     * Find the first List_permission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {list_permissionFindFirstOrThrowArgs} args - Arguments to find a List_permission
     * @example
     * // Get one List_permission
     * const list_permission = await prisma.list_permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends list_permissionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, list_permissionFindFirstOrThrowArgs>
    ): Prisma__list_permissionClient<list_permissionGetPayload<T>>

    /**
     * Find zero or more List_permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {list_permissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all List_permissions
     * const list_permissions = await prisma.list_permission.findMany()
     * 
     * // Get first 10 List_permissions
     * const list_permissions = await prisma.list_permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const list_permissionWithIdOnly = await prisma.list_permission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends list_permissionFindManyArgs>(
      args?: SelectSubset<T, list_permissionFindManyArgs>
    ): Prisma.PrismaPromise<Array<list_permissionGetPayload<T>>>

    /**
     * Create a List_permission.
     * @param {list_permissionCreateArgs} args - Arguments to create a List_permission.
     * @example
     * // Create one List_permission
     * const List_permission = await prisma.list_permission.create({
     *   data: {
     *     // ... data to create a List_permission
     *   }
     * })
     * 
    **/
    create<T extends list_permissionCreateArgs>(
      args: SelectSubset<T, list_permissionCreateArgs>
    ): Prisma__list_permissionClient<list_permissionGetPayload<T>>

    /**
     * Create many List_permissions.
     *     @param {list_permissionCreateManyArgs} args - Arguments to create many List_permissions.
     *     @example
     *     // Create many List_permissions
     *     const list_permission = await prisma.list_permission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends list_permissionCreateManyArgs>(
      args?: SelectSubset<T, list_permissionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a List_permission.
     * @param {list_permissionDeleteArgs} args - Arguments to delete one List_permission.
     * @example
     * // Delete one List_permission
     * const List_permission = await prisma.list_permission.delete({
     *   where: {
     *     // ... filter to delete one List_permission
     *   }
     * })
     * 
    **/
    delete<T extends list_permissionDeleteArgs>(
      args: SelectSubset<T, list_permissionDeleteArgs>
    ): Prisma__list_permissionClient<list_permissionGetPayload<T>>

    /**
     * Update one List_permission.
     * @param {list_permissionUpdateArgs} args - Arguments to update one List_permission.
     * @example
     * // Update one List_permission
     * const list_permission = await prisma.list_permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends list_permissionUpdateArgs>(
      args: SelectSubset<T, list_permissionUpdateArgs>
    ): Prisma__list_permissionClient<list_permissionGetPayload<T>>

    /**
     * Delete zero or more List_permissions.
     * @param {list_permissionDeleteManyArgs} args - Arguments to filter List_permissions to delete.
     * @example
     * // Delete a few List_permissions
     * const { count } = await prisma.list_permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends list_permissionDeleteManyArgs>(
      args?: SelectSubset<T, list_permissionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more List_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {list_permissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many List_permissions
     * const list_permission = await prisma.list_permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends list_permissionUpdateManyArgs>(
      args: SelectSubset<T, list_permissionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one List_permission.
     * @param {list_permissionUpsertArgs} args - Arguments to update or create a List_permission.
     * @example
     * // Update or create a List_permission
     * const list_permission = await prisma.list_permission.upsert({
     *   create: {
     *     // ... data to create a List_permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the List_permission we want to update
     *   }
     * })
    **/
    upsert<T extends list_permissionUpsertArgs>(
      args: SelectSubset<T, list_permissionUpsertArgs>
    ): Prisma__list_permissionClient<list_permissionGetPayload<T>>

    /**
     * Count the number of List_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {list_permissionCountArgs} args - Arguments to filter List_permissions to count.
     * @example
     * // Count the number of List_permissions
     * const count = await prisma.list_permission.count({
     *   where: {
     *     // ... the filter for the List_permissions we want to count
     *   }
     * })
    **/
    count<T extends list_permissionCountArgs>(
      args?: Subset<T, list_permissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], List_permissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a List_permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {List_permissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends List_permissionAggregateArgs>(args: Subset<T, List_permissionAggregateArgs>): Prisma.PrismaPromise<GetList_permissionAggregateType<T>>

    /**
     * Group by List_permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {List_permissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends List_permissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: List_permissionGroupByArgs['orderBy'] }
        : { orderBy?: List_permissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, List_permissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetList_permissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for list_permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__list_permissionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    list<T extends listArgs= {}>(args?: Subset<T, listArgs>): Prisma__listClient<listGetPayload<T> | Null>;

    user<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * list_permission base type for findUnique actions
   */
  export type list_permissionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * Filter, which list_permission to fetch.
     */
    where: list_permissionWhereUniqueInput
  }

  /**
   * list_permission findUnique
   */
  export interface list_permissionFindUniqueArgs extends list_permissionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * list_permission findUniqueOrThrow
   */
  export type list_permissionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * Filter, which list_permission to fetch.
     */
    where: list_permissionWhereUniqueInput
  }


  /**
   * list_permission base type for findFirst actions
   */
  export type list_permissionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * Filter, which list_permission to fetch.
     */
    where?: list_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of list_permissions to fetch.
     */
    orderBy?: Enumerable<list_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for list_permissions.
     */
    cursor?: list_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` list_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` list_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of list_permissions.
     */
    distinct?: Enumerable<List_permissionScalarFieldEnum>
  }

  /**
   * list_permission findFirst
   */
  export interface list_permissionFindFirstArgs extends list_permissionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * list_permission findFirstOrThrow
   */
  export type list_permissionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * Filter, which list_permission to fetch.
     */
    where?: list_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of list_permissions to fetch.
     */
    orderBy?: Enumerable<list_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for list_permissions.
     */
    cursor?: list_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` list_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` list_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of list_permissions.
     */
    distinct?: Enumerable<List_permissionScalarFieldEnum>
  }


  /**
   * list_permission findMany
   */
  export type list_permissionFindManyArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * Filter, which list_permissions to fetch.
     */
    where?: list_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of list_permissions to fetch.
     */
    orderBy?: Enumerable<list_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing list_permissions.
     */
    cursor?: list_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` list_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` list_permissions.
     */
    skip?: number
    distinct?: Enumerable<List_permissionScalarFieldEnum>
  }


  /**
   * list_permission create
   */
  export type list_permissionCreateArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * The data needed to create a list_permission.
     */
    data: XOR<list_permissionCreateInput, list_permissionUncheckedCreateInput>
  }


  /**
   * list_permission createMany
   */
  export type list_permissionCreateManyArgs = {
    /**
     * The data used to create many list_permissions.
     */
    data: Enumerable<list_permissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * list_permission update
   */
  export type list_permissionUpdateArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * The data needed to update a list_permission.
     */
    data: XOR<list_permissionUpdateInput, list_permissionUncheckedUpdateInput>
    /**
     * Choose, which list_permission to update.
     */
    where: list_permissionWhereUniqueInput
  }


  /**
   * list_permission updateMany
   */
  export type list_permissionUpdateManyArgs = {
    /**
     * The data used to update list_permissions.
     */
    data: XOR<list_permissionUpdateManyMutationInput, list_permissionUncheckedUpdateManyInput>
    /**
     * Filter which list_permissions to update
     */
    where?: list_permissionWhereInput
  }


  /**
   * list_permission upsert
   */
  export type list_permissionUpsertArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * The filter to search for the list_permission to update in case it exists.
     */
    where: list_permissionWhereUniqueInput
    /**
     * In case the list_permission found by the `where` argument doesn't exist, create a new list_permission with this data.
     */
    create: XOR<list_permissionCreateInput, list_permissionUncheckedCreateInput>
    /**
     * In case the list_permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<list_permissionUpdateInput, list_permissionUncheckedUpdateInput>
  }


  /**
   * list_permission delete
   */
  export type list_permissionDeleteArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
    /**
     * Filter which list_permission to delete.
     */
    where: list_permissionWhereUniqueInput
  }


  /**
   * list_permission deleteMany
   */
  export type list_permissionDeleteManyArgs = {
    /**
     * Filter which list_permissions to delete
     */
    where?: list_permissionWhereInput
  }


  /**
   * list_permission without action
   */
  export type list_permissionArgs = {
    /**
     * Select specific fields to fetch from the list_permission
     */
    select?: list_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: list_permissionInclude | null
  }



  /**
   * Model item
   */


  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
    category_id: number | null
    created_by_id: number | null
    last_modified_by_id: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
    category_id: number | null
    created_by_id: number | null
    last_modified_by_id: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    category: Category | null
    category_id: number | null
    item_type: ItemType | null
    date_tz_sensitive: Date | null
    date_tz_sensitive_end: Date | null
    time_sensitive_flag: boolean | null
    date_range_flag: boolean | null
    date_tz_insensitive: string | null
    date_tz_insensitive_end: string | null
    permission_level: VisibilityLevel | null
    created_by_id: number | null
    last_modified_by_id: number | null
    created_at: Date | null
    active: boolean | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    category: Category | null
    category_id: number | null
    item_type: ItemType | null
    date_tz_sensitive: Date | null
    date_tz_sensitive_end: Date | null
    time_sensitive_flag: boolean | null
    date_range_flag: boolean | null
    date_tz_insensitive: string | null
    date_tz_insensitive_end: string | null
    permission_level: VisibilityLevel | null
    created_by_id: number | null
    last_modified_by_id: number | null
    created_at: Date | null
    active: boolean | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    category_id: number
    item_type: number
    date_tz_sensitive: number
    date_tz_sensitive_end: number
    time_sensitive_flag: number
    date_range_flag: number
    date_tz_insensitive: number
    date_tz_insensitive_end: number
    permission_level: number
    created_by_id: number
    last_modified_by_id: number
    created_at: number
    active: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    category_id?: true
    created_by_id?: true
    last_modified_by_id?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    category_id?: true
    created_by_id?: true
    last_modified_by_id?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    category_id?: true
    item_type?: true
    date_tz_sensitive?: true
    date_tz_sensitive_end?: true
    time_sensitive_flag?: true
    date_range_flag?: true
    date_tz_insensitive?: true
    date_tz_insensitive_end?: true
    permission_level?: true
    created_by_id?: true
    last_modified_by_id?: true
    created_at?: true
    active?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    category_id?: true
    item_type?: true
    date_tz_sensitive?: true
    date_tz_sensitive_end?: true
    time_sensitive_flag?: true
    date_range_flag?: true
    date_tz_insensitive?: true
    date_tz_insensitive_end?: true
    permission_level?: true
    created_by_id?: true
    last_modified_by_id?: true
    created_at?: true
    active?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    category_id?: true
    item_type?: true
    date_tz_sensitive?: true
    date_tz_sensitive_end?: true
    time_sensitive_flag?: true
    date_range_flag?: true
    date_tz_insensitive?: true
    date_tz_insensitive_end?: true
    permission_level?: true
    created_by_id?: true
    last_modified_by_id?: true
    created_at?: true
    active?: true
    _all?: true
  }

  export type ItemAggregateArgs = {
    /**
     * Filter which item to aggregate.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs = {
    where?: itemWhereInput
    orderBy?: Enumerable<itemOrderByWithAggregationInput>
    by: ItemScalarFieldEnum[]
    having?: itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }


  export type ItemGroupByOutputType = {
    id: number
    name: string
    description: string | null
    category: Category | null
    category_id: number | null
    item_type: ItemType
    date_tz_sensitive: Date | null
    date_tz_sensitive_end: Date | null
    time_sensitive_flag: boolean
    date_range_flag: boolean
    date_tz_insensitive: string | null
    date_tz_insensitive_end: string | null
    permission_level: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at: Date
    active: boolean
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type itemSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    list?: boolean | listArgs
    category_id?: boolean
    item_type?: boolean
    date_tz_sensitive?: boolean
    date_tz_sensitive_end?: boolean
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: boolean
    date_tz_insensitive_end?: boolean
    permission_level?: boolean
    created_by_id?: boolean
    last_modified_by_id?: boolean
    created_at?: boolean
    item_permissions?: boolean | item$item_permissionsArgs
    active?: boolean
    _count?: boolean | ItemCountOutputTypeArgs
  }


  export type itemInclude = {
    list?: boolean | listArgs
    item_permissions?: boolean | item$item_permissionsArgs
    _count?: boolean | ItemCountOutputTypeArgs
  }

  export type itemGetPayload<S extends boolean | null | undefined | itemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? item :
    S extends undefined ? never :
    S extends { include: any } & (itemArgs | itemFindManyArgs)
    ? item  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'list' ? listGetPayload<S['include'][P]> | null :
        P extends 'item_permissions' ? Array < item_permissionGetPayload<S['include'][P]>>  :
        P extends '_count' ? ItemCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (itemArgs | itemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'list' ? listGetPayload<S['select'][P]> | null :
        P extends 'item_permissions' ? Array < item_permissionGetPayload<S['select'][P]>>  :
        P extends '_count' ? ItemCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof item ? item[P] : never
  } 
      : item


  type itemCountArgs = 
    Omit<itemFindManyArgs, 'select' | 'include'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface itemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Item that matches the filter.
     * @param {itemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, itemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'item'> extends True ? Prisma__itemClient<itemGetPayload<T>> : Prisma__itemClient<itemGetPayload<T> | null, null>

    /**
     * Find one Item that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {itemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends itemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, itemFindUniqueOrThrowArgs>
    ): Prisma__itemClient<itemGetPayload<T>>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, itemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'item'> extends True ? Prisma__itemClient<itemGetPayload<T>> : Prisma__itemClient<itemGetPayload<T> | null, null>

    /**
     * Find the first Item that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends itemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, itemFindFirstOrThrowArgs>
    ): Prisma__itemClient<itemGetPayload<T>>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends itemFindManyArgs>(
      args?: SelectSubset<T, itemFindManyArgs>
    ): Prisma.PrismaPromise<Array<itemGetPayload<T>>>

    /**
     * Create a Item.
     * @param {itemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends itemCreateArgs>(
      args: SelectSubset<T, itemCreateArgs>
    ): Prisma__itemClient<itemGetPayload<T>>

    /**
     * Create many Items.
     *     @param {itemCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const item = await prisma.item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itemCreateManyArgs>(
      args?: SelectSubset<T, itemCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {itemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends itemDeleteArgs>(
      args: SelectSubset<T, itemDeleteArgs>
    ): Prisma__itemClient<itemGetPayload<T>>

    /**
     * Update one Item.
     * @param {itemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itemUpdateArgs>(
      args: SelectSubset<T, itemUpdateArgs>
    ): Prisma__itemClient<itemGetPayload<T>>

    /**
     * Delete zero or more Items.
     * @param {itemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itemDeleteManyArgs>(
      args?: SelectSubset<T, itemDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itemUpdateManyArgs>(
      args: SelectSubset<T, itemUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {itemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends itemUpsertArgs>(
      args: SelectSubset<T, itemUpsertArgs>
    ): Prisma__itemClient<itemGetPayload<T>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends itemCountArgs>(
      args?: Subset<T, itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itemClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    list<T extends listArgs= {}>(args?: Subset<T, listArgs>): Prisma__listClient<listGetPayload<T> | Null>;

    item_permissions<T extends item$item_permissionsArgs= {}>(args?: Subset<T, item$item_permissionsArgs>): Prisma.PrismaPromise<Array<item_permissionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * item base type for findUnique actions
   */
  export type itemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * Filter, which item to fetch.
     */
    where: itemWhereUniqueInput
  }

  /**
   * item findUnique
   */
  export interface itemFindUniqueArgs extends itemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * item findUniqueOrThrow
   */
  export type itemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * Filter, which item to fetch.
     */
    where: itemWhereUniqueInput
  }


  /**
   * item base type for findFirst actions
   */
  export type itemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * Filter, which item to fetch.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     */
    distinct?: Enumerable<ItemScalarFieldEnum>
  }

  /**
   * item findFirst
   */
  export interface itemFindFirstArgs extends itemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * item findFirstOrThrow
   */
  export type itemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * Filter, which item to fetch.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     */
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * item findMany
   */
  export type itemFindManyArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * Filter, which items to fetch.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing items.
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * item create
   */
  export type itemCreateArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * The data needed to create a item.
     */
    data: XOR<itemCreateInput, itemUncheckedCreateInput>
  }


  /**
   * item createMany
   */
  export type itemCreateManyArgs = {
    /**
     * The data used to create many items.
     */
    data: Enumerable<itemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * item update
   */
  export type itemUpdateArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * The data needed to update a item.
     */
    data: XOR<itemUpdateInput, itemUncheckedUpdateInput>
    /**
     * Choose, which item to update.
     */
    where: itemWhereUniqueInput
  }


  /**
   * item updateMany
   */
  export type itemUpdateManyArgs = {
    /**
     * The data used to update items.
     */
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyInput>
    /**
     * Filter which items to update
     */
    where?: itemWhereInput
  }


  /**
   * item upsert
   */
  export type itemUpsertArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * The filter to search for the item to update in case it exists.
     */
    where: itemWhereUniqueInput
    /**
     * In case the item found by the `where` argument doesn't exist, create a new item with this data.
     */
    create: XOR<itemCreateInput, itemUncheckedCreateInput>
    /**
     * In case the item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<itemUpdateInput, itemUncheckedUpdateInput>
  }


  /**
   * item delete
   */
  export type itemDeleteArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
    /**
     * Filter which item to delete.
     */
    where: itemWhereUniqueInput
  }


  /**
   * item deleteMany
   */
  export type itemDeleteManyArgs = {
    /**
     * Filter which items to delete
     */
    where?: itemWhereInput
  }


  /**
   * item.item_permissions
   */
  export type item$item_permissionsArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    where?: item_permissionWhereInput
    orderBy?: Enumerable<item_permissionOrderByWithRelationInput>
    cursor?: item_permissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Item_permissionScalarFieldEnum>
  }


  /**
   * item without action
   */
  export type itemArgs = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude | null
  }



  /**
   * Model item_permission
   */


  export type AggregateItem_permission = {
    _count: Item_permissionCountAggregateOutputType | null
    _avg: Item_permissionAvgAggregateOutputType | null
    _sum: Item_permissionSumAggregateOutputType | null
    _min: Item_permissionMinAggregateOutputType | null
    _max: Item_permissionMaxAggregateOutputType | null
  }

  export type Item_permissionAvgAggregateOutputType = {
    id: number | null
    item_id: number | null
    user_id: number | null
  }

  export type Item_permissionSumAggregateOutputType = {
    id: number | null
    item_id: number | null
    user_id: number | null
  }

  export type Item_permissionMinAggregateOutputType = {
    id: number | null
    item_id: number | null
    user_id: number | null
    created_at: Date | null
  }

  export type Item_permissionMaxAggregateOutputType = {
    id: number | null
    item_id: number | null
    user_id: number | null
    created_at: Date | null
  }

  export type Item_permissionCountAggregateOutputType = {
    id: number
    item_id: number
    user_id: number
    created_at: number
    _all: number
  }


  export type Item_permissionAvgAggregateInputType = {
    id?: true
    item_id?: true
    user_id?: true
  }

  export type Item_permissionSumAggregateInputType = {
    id?: true
    item_id?: true
    user_id?: true
  }

  export type Item_permissionMinAggregateInputType = {
    id?: true
    item_id?: true
    user_id?: true
    created_at?: true
  }

  export type Item_permissionMaxAggregateInputType = {
    id?: true
    item_id?: true
    user_id?: true
    created_at?: true
  }

  export type Item_permissionCountAggregateInputType = {
    id?: true
    item_id?: true
    user_id?: true
    created_at?: true
    _all?: true
  }

  export type Item_permissionAggregateArgs = {
    /**
     * Filter which item_permission to aggregate.
     */
    where?: item_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_permissions to fetch.
     */
    orderBy?: Enumerable<item_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: item_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned item_permissions
    **/
    _count?: true | Item_permissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Item_permissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Item_permissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Item_permissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Item_permissionMaxAggregateInputType
  }

  export type GetItem_permissionAggregateType<T extends Item_permissionAggregateArgs> = {
        [P in keyof T & keyof AggregateItem_permission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem_permission[P]>
      : GetScalarType<T[P], AggregateItem_permission[P]>
  }




  export type Item_permissionGroupByArgs = {
    where?: item_permissionWhereInput
    orderBy?: Enumerable<item_permissionOrderByWithAggregationInput>
    by: Item_permissionScalarFieldEnum[]
    having?: item_permissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Item_permissionCountAggregateInputType | true
    _avg?: Item_permissionAvgAggregateInputType
    _sum?: Item_permissionSumAggregateInputType
    _min?: Item_permissionMinAggregateInputType
    _max?: Item_permissionMaxAggregateInputType
  }


  export type Item_permissionGroupByOutputType = {
    id: number
    item_id: number
    user_id: number
    created_at: Date
    _count: Item_permissionCountAggregateOutputType | null
    _avg: Item_permissionAvgAggregateOutputType | null
    _sum: Item_permissionSumAggregateOutputType | null
    _min: Item_permissionMinAggregateOutputType | null
    _max: Item_permissionMaxAggregateOutputType | null
  }

  type GetItem_permissionGroupByPayload<T extends Item_permissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Item_permissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Item_permissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Item_permissionGroupByOutputType[P]>
            : GetScalarType<T[P], Item_permissionGroupByOutputType[P]>
        }
      >
    >


  export type item_permissionSelect = {
    id?: boolean
    item?: boolean | itemArgs
    item_id?: boolean
    user?: boolean | userArgs
    user_id?: boolean
    created_at?: boolean
  }


  export type item_permissionInclude = {
    item?: boolean | itemArgs
    user?: boolean | userArgs
  }

  export type item_permissionGetPayload<S extends boolean | null | undefined | item_permissionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? item_permission :
    S extends undefined ? never :
    S extends { include: any } & (item_permissionArgs | item_permissionFindManyArgs)
    ? item_permission  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'item' ? itemGetPayload<S['include'][P]> :
        P extends 'user' ? userGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (item_permissionArgs | item_permissionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'item' ? itemGetPayload<S['select'][P]> :
        P extends 'user' ? userGetPayload<S['select'][P]> :  P extends keyof item_permission ? item_permission[P] : never
  } 
      : item_permission


  type item_permissionCountArgs = 
    Omit<item_permissionFindManyArgs, 'select' | 'include'> & {
      select?: Item_permissionCountAggregateInputType | true
    }

  export interface item_permissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Item_permission that matches the filter.
     * @param {item_permissionFindUniqueArgs} args - Arguments to find a Item_permission
     * @example
     * // Get one Item_permission
     * const item_permission = await prisma.item_permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends item_permissionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, item_permissionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'item_permission'> extends True ? Prisma__item_permissionClient<item_permissionGetPayload<T>> : Prisma__item_permissionClient<item_permissionGetPayload<T> | null, null>

    /**
     * Find one Item_permission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {item_permissionFindUniqueOrThrowArgs} args - Arguments to find a Item_permission
     * @example
     * // Get one Item_permission
     * const item_permission = await prisma.item_permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends item_permissionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, item_permissionFindUniqueOrThrowArgs>
    ): Prisma__item_permissionClient<item_permissionGetPayload<T>>

    /**
     * Find the first Item_permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_permissionFindFirstArgs} args - Arguments to find a Item_permission
     * @example
     * // Get one Item_permission
     * const item_permission = await prisma.item_permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends item_permissionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, item_permissionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'item_permission'> extends True ? Prisma__item_permissionClient<item_permissionGetPayload<T>> : Prisma__item_permissionClient<item_permissionGetPayload<T> | null, null>

    /**
     * Find the first Item_permission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_permissionFindFirstOrThrowArgs} args - Arguments to find a Item_permission
     * @example
     * // Get one Item_permission
     * const item_permission = await prisma.item_permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends item_permissionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, item_permissionFindFirstOrThrowArgs>
    ): Prisma__item_permissionClient<item_permissionGetPayload<T>>

    /**
     * Find zero or more Item_permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_permissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Item_permissions
     * const item_permissions = await prisma.item_permission.findMany()
     * 
     * // Get first 10 Item_permissions
     * const item_permissions = await prisma.item_permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const item_permissionWithIdOnly = await prisma.item_permission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends item_permissionFindManyArgs>(
      args?: SelectSubset<T, item_permissionFindManyArgs>
    ): Prisma.PrismaPromise<Array<item_permissionGetPayload<T>>>

    /**
     * Create a Item_permission.
     * @param {item_permissionCreateArgs} args - Arguments to create a Item_permission.
     * @example
     * // Create one Item_permission
     * const Item_permission = await prisma.item_permission.create({
     *   data: {
     *     // ... data to create a Item_permission
     *   }
     * })
     * 
    **/
    create<T extends item_permissionCreateArgs>(
      args: SelectSubset<T, item_permissionCreateArgs>
    ): Prisma__item_permissionClient<item_permissionGetPayload<T>>

    /**
     * Create many Item_permissions.
     *     @param {item_permissionCreateManyArgs} args - Arguments to create many Item_permissions.
     *     @example
     *     // Create many Item_permissions
     *     const item_permission = await prisma.item_permission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends item_permissionCreateManyArgs>(
      args?: SelectSubset<T, item_permissionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item_permission.
     * @param {item_permissionDeleteArgs} args - Arguments to delete one Item_permission.
     * @example
     * // Delete one Item_permission
     * const Item_permission = await prisma.item_permission.delete({
     *   where: {
     *     // ... filter to delete one Item_permission
     *   }
     * })
     * 
    **/
    delete<T extends item_permissionDeleteArgs>(
      args: SelectSubset<T, item_permissionDeleteArgs>
    ): Prisma__item_permissionClient<item_permissionGetPayload<T>>

    /**
     * Update one Item_permission.
     * @param {item_permissionUpdateArgs} args - Arguments to update one Item_permission.
     * @example
     * // Update one Item_permission
     * const item_permission = await prisma.item_permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends item_permissionUpdateArgs>(
      args: SelectSubset<T, item_permissionUpdateArgs>
    ): Prisma__item_permissionClient<item_permissionGetPayload<T>>

    /**
     * Delete zero or more Item_permissions.
     * @param {item_permissionDeleteManyArgs} args - Arguments to filter Item_permissions to delete.
     * @example
     * // Delete a few Item_permissions
     * const { count } = await prisma.item_permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends item_permissionDeleteManyArgs>(
      args?: SelectSubset<T, item_permissionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Item_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_permissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Item_permissions
     * const item_permission = await prisma.item_permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends item_permissionUpdateManyArgs>(
      args: SelectSubset<T, item_permissionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item_permission.
     * @param {item_permissionUpsertArgs} args - Arguments to update or create a Item_permission.
     * @example
     * // Update or create a Item_permission
     * const item_permission = await prisma.item_permission.upsert({
     *   create: {
     *     // ... data to create a Item_permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item_permission we want to update
     *   }
     * })
    **/
    upsert<T extends item_permissionUpsertArgs>(
      args: SelectSubset<T, item_permissionUpsertArgs>
    ): Prisma__item_permissionClient<item_permissionGetPayload<T>>

    /**
     * Count the number of Item_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_permissionCountArgs} args - Arguments to filter Item_permissions to count.
     * @example
     * // Count the number of Item_permissions
     * const count = await prisma.item_permission.count({
     *   where: {
     *     // ... the filter for the Item_permissions we want to count
     *   }
     * })
    **/
    count<T extends item_permissionCountArgs>(
      args?: Subset<T, item_permissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Item_permissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item_permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_permissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Item_permissionAggregateArgs>(args: Subset<T, Item_permissionAggregateArgs>): Prisma.PrismaPromise<GetItem_permissionAggregateType<T>>

    /**
     * Group by Item_permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_permissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Item_permissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Item_permissionGroupByArgs['orderBy'] }
        : { orderBy?: Item_permissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Item_permissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItem_permissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for item_permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__item_permissionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    item<T extends itemArgs= {}>(args?: Subset<T, itemArgs>): Prisma__itemClient<itemGetPayload<T> | Null>;

    user<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * item_permission base type for findUnique actions
   */
  export type item_permissionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * Filter, which item_permission to fetch.
     */
    where: item_permissionWhereUniqueInput
  }

  /**
   * item_permission findUnique
   */
  export interface item_permissionFindUniqueArgs extends item_permissionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * item_permission findUniqueOrThrow
   */
  export type item_permissionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * Filter, which item_permission to fetch.
     */
    where: item_permissionWhereUniqueInput
  }


  /**
   * item_permission base type for findFirst actions
   */
  export type item_permissionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * Filter, which item_permission to fetch.
     */
    where?: item_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_permissions to fetch.
     */
    orderBy?: Enumerable<item_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for item_permissions.
     */
    cursor?: item_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of item_permissions.
     */
    distinct?: Enumerable<Item_permissionScalarFieldEnum>
  }

  /**
   * item_permission findFirst
   */
  export interface item_permissionFindFirstArgs extends item_permissionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * item_permission findFirstOrThrow
   */
  export type item_permissionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * Filter, which item_permission to fetch.
     */
    where?: item_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_permissions to fetch.
     */
    orderBy?: Enumerable<item_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for item_permissions.
     */
    cursor?: item_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of item_permissions.
     */
    distinct?: Enumerable<Item_permissionScalarFieldEnum>
  }


  /**
   * item_permission findMany
   */
  export type item_permissionFindManyArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * Filter, which item_permissions to fetch.
     */
    where?: item_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_permissions to fetch.
     */
    orderBy?: Enumerable<item_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing item_permissions.
     */
    cursor?: item_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_permissions.
     */
    skip?: number
    distinct?: Enumerable<Item_permissionScalarFieldEnum>
  }


  /**
   * item_permission create
   */
  export type item_permissionCreateArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * The data needed to create a item_permission.
     */
    data: XOR<item_permissionCreateInput, item_permissionUncheckedCreateInput>
  }


  /**
   * item_permission createMany
   */
  export type item_permissionCreateManyArgs = {
    /**
     * The data used to create many item_permissions.
     */
    data: Enumerable<item_permissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * item_permission update
   */
  export type item_permissionUpdateArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * The data needed to update a item_permission.
     */
    data: XOR<item_permissionUpdateInput, item_permissionUncheckedUpdateInput>
    /**
     * Choose, which item_permission to update.
     */
    where: item_permissionWhereUniqueInput
  }


  /**
   * item_permission updateMany
   */
  export type item_permissionUpdateManyArgs = {
    /**
     * The data used to update item_permissions.
     */
    data: XOR<item_permissionUpdateManyMutationInput, item_permissionUncheckedUpdateManyInput>
    /**
     * Filter which item_permissions to update
     */
    where?: item_permissionWhereInput
  }


  /**
   * item_permission upsert
   */
  export type item_permissionUpsertArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * The filter to search for the item_permission to update in case it exists.
     */
    where: item_permissionWhereUniqueInput
    /**
     * In case the item_permission found by the `where` argument doesn't exist, create a new item_permission with this data.
     */
    create: XOR<item_permissionCreateInput, item_permissionUncheckedCreateInput>
    /**
     * In case the item_permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<item_permissionUpdateInput, item_permissionUncheckedUpdateInput>
  }


  /**
   * item_permission delete
   */
  export type item_permissionDeleteArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
    /**
     * Filter which item_permission to delete.
     */
    where: item_permissionWhereUniqueInput
  }


  /**
   * item_permission deleteMany
   */
  export type item_permissionDeleteManyArgs = {
    /**
     * Filter which item_permissions to delete
     */
    where?: item_permissionWhereInput
  }


  /**
   * item_permission without action
   */
  export type item_permissionArgs = {
    /**
     * Select specific fields to fetch from the item_permission
     */
    select?: item_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_permissionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    category_id: 'category_id',
    item_type: 'item_type',
    date_tz_sensitive: 'date_tz_sensitive',
    date_tz_sensitive_end: 'date_tz_sensitive_end',
    time_sensitive_flag: 'time_sensitive_flag',
    date_range_flag: 'date_range_flag',
    date_tz_insensitive: 'date_tz_insensitive',
    date_tz_insensitive_end: 'date_tz_insensitive_end',
    permission_level: 'permission_level',
    created_by_id: 'created_by_id',
    last_modified_by_id: 'last_modified_by_id',
    created_at: 'created_at',
    active: 'active'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const Item_permissionScalarFieldEnum: {
    id: 'id',
    item_id: 'item_id',
    user_id: 'user_id',
    created_at: 'created_at'
  };

  export type Item_permissionScalarFieldEnum = (typeof Item_permissionScalarFieldEnum)[keyof typeof Item_permissionScalarFieldEnum]


  export const ListScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    owner_id: 'owner_id',
    passcode: 'passcode',
    created_at: 'created_at'
  };

  export type ListScalarFieldEnum = (typeof ListScalarFieldEnum)[keyof typeof ListScalarFieldEnum]


  export const List_permissionScalarFieldEnum: {
    id: 'id',
    list_id: 'list_id',
    user_id: 'user_id',
    permission: 'permission',
    created_at: 'created_at'
  };

  export type List_permissionScalarFieldEnum = (typeof List_permissionScalarFieldEnum)[keyof typeof List_permissionScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    password: 'password',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    item_permissions?: Item_permissionListRelationFilter
    list_permissions?: List_permissionListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    item_permissions?: item_permissionOrderByRelationAggregateInput
    list_permissions?: list_permissionOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type listWhereInput = {
    AND?: Enumerable<listWhereInput>
    OR?: Enumerable<listWhereInput>
    NOT?: Enumerable<listWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    owner_id?: IntFilter | number
    passcode?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    list_permissions?: List_permissionListRelationFilter
    items?: ItemListRelationFilter
  }

  export type listOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    passcode?: SortOrder
    created_at?: SortOrder
    list_permissions?: list_permissionOrderByRelationAggregateInput
    items?: itemOrderByRelationAggregateInput
  }

  export type listWhereUniqueInput = {
    id?: number
  }

  export type listOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    passcode?: SortOrder
    created_at?: SortOrder
    _count?: listCountOrderByAggregateInput
    _avg?: listAvgOrderByAggregateInput
    _max?: listMaxOrderByAggregateInput
    _min?: listMinOrderByAggregateInput
    _sum?: listSumOrderByAggregateInput
  }

  export type listScalarWhereWithAggregatesInput = {
    AND?: Enumerable<listScalarWhereWithAggregatesInput>
    OR?: Enumerable<listScalarWhereWithAggregatesInput>
    NOT?: Enumerable<listScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    owner_id?: IntWithAggregatesFilter | number
    passcode?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type list_permissionWhereInput = {
    AND?: Enumerable<list_permissionWhereInput>
    OR?: Enumerable<list_permissionWhereInput>
    NOT?: Enumerable<list_permissionWhereInput>
    id?: IntFilter | number
    list?: XOR<ListRelationFilter, listWhereInput>
    list_id?: IntFilter | number
    user?: XOR<UserRelationFilter, userWhereInput>
    user_id?: IntFilter | number
    permission?: EnumAccessLevelFilter | AccessLevel
    created_at?: DateTimeFilter | Date | string
  }

  export type list_permissionOrderByWithRelationInput = {
    id?: SortOrder
    list?: listOrderByWithRelationInput
    list_id?: SortOrder
    user?: userOrderByWithRelationInput
    user_id?: SortOrder
    permission?: SortOrder
    created_at?: SortOrder
  }

  export type list_permissionWhereUniqueInput = {
    id?: number
    list_id_user_id?: list_permissionList_idUser_idCompoundUniqueInput
  }

  export type list_permissionOrderByWithAggregationInput = {
    id?: SortOrder
    list_id?: SortOrder
    user_id?: SortOrder
    permission?: SortOrder
    created_at?: SortOrder
    _count?: list_permissionCountOrderByAggregateInput
    _avg?: list_permissionAvgOrderByAggregateInput
    _max?: list_permissionMaxOrderByAggregateInput
    _min?: list_permissionMinOrderByAggregateInput
    _sum?: list_permissionSumOrderByAggregateInput
  }

  export type list_permissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<list_permissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<list_permissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<list_permissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    list_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    permission?: EnumAccessLevelWithAggregatesFilter | AccessLevel
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type itemWhereInput = {
    AND?: Enumerable<itemWhereInput>
    OR?: Enumerable<itemWhereInput>
    NOT?: Enumerable<itemWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    category?: EnumCategoryNullableFilter | Category | null
    list?: XOR<ListRelationFilter, listWhereInput> | null
    category_id?: IntNullableFilter | number | null
    item_type?: EnumItemTypeFilter | ItemType
    date_tz_sensitive?: DateTimeNullableFilter | Date | string | null
    date_tz_sensitive_end?: DateTimeNullableFilter | Date | string | null
    time_sensitive_flag?: BoolFilter | boolean
    date_range_flag?: BoolFilter | boolean
    date_tz_insensitive?: StringNullableFilter | string | null
    date_tz_insensitive_end?: StringNullableFilter | string | null
    permission_level?: EnumVisibilityLevelFilter | VisibilityLevel
    created_by_id?: IntFilter | number
    last_modified_by_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    item_permissions?: Item_permissionListRelationFilter
    active?: BoolFilter | boolean
  }

  export type itemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    list?: listOrderByWithRelationInput
    category_id?: SortOrder
    item_type?: SortOrder
    date_tz_sensitive?: SortOrder
    date_tz_sensitive_end?: SortOrder
    time_sensitive_flag?: SortOrder
    date_range_flag?: SortOrder
    date_tz_insensitive?: SortOrder
    date_tz_insensitive_end?: SortOrder
    permission_level?: SortOrder
    created_by_id?: SortOrder
    last_modified_by_id?: SortOrder
    created_at?: SortOrder
    item_permissions?: item_permissionOrderByRelationAggregateInput
    active?: SortOrder
  }

  export type itemWhereUniqueInput = {
    id?: number
  }

  export type itemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    category_id?: SortOrder
    item_type?: SortOrder
    date_tz_sensitive?: SortOrder
    date_tz_sensitive_end?: SortOrder
    time_sensitive_flag?: SortOrder
    date_range_flag?: SortOrder
    date_tz_insensitive?: SortOrder
    date_tz_insensitive_end?: SortOrder
    permission_level?: SortOrder
    created_by_id?: SortOrder
    last_modified_by_id?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
    _count?: itemCountOrderByAggregateInput
    _avg?: itemAvgOrderByAggregateInput
    _max?: itemMaxOrderByAggregateInput
    _min?: itemMinOrderByAggregateInput
    _sum?: itemSumOrderByAggregateInput
  }

  export type itemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<itemScalarWhereWithAggregatesInput>
    OR?: Enumerable<itemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<itemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    category?: EnumCategoryNullableWithAggregatesFilter | Category | null
    category_id?: IntNullableWithAggregatesFilter | number | null
    item_type?: EnumItemTypeWithAggregatesFilter | ItemType
    date_tz_sensitive?: DateTimeNullableWithAggregatesFilter | Date | string | null
    date_tz_sensitive_end?: DateTimeNullableWithAggregatesFilter | Date | string | null
    time_sensitive_flag?: BoolWithAggregatesFilter | boolean
    date_range_flag?: BoolWithAggregatesFilter | boolean
    date_tz_insensitive?: StringNullableWithAggregatesFilter | string | null
    date_tz_insensitive_end?: StringNullableWithAggregatesFilter | string | null
    permission_level?: EnumVisibilityLevelWithAggregatesFilter | VisibilityLevel
    created_by_id?: IntWithAggregatesFilter | number
    last_modified_by_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    active?: BoolWithAggregatesFilter | boolean
  }

  export type item_permissionWhereInput = {
    AND?: Enumerable<item_permissionWhereInput>
    OR?: Enumerable<item_permissionWhereInput>
    NOT?: Enumerable<item_permissionWhereInput>
    id?: IntFilter | number
    item?: XOR<ItemRelationFilter, itemWhereInput>
    item_id?: IntFilter | number
    user?: XOR<UserRelationFilter, userWhereInput>
    user_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type item_permissionOrderByWithRelationInput = {
    id?: SortOrder
    item?: itemOrderByWithRelationInput
    item_id?: SortOrder
    user?: userOrderByWithRelationInput
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type item_permissionWhereUniqueInput = {
    id?: number
    item_id_user_id?: item_permissionItem_idUser_idCompoundUniqueInput
  }

  export type item_permissionOrderByWithAggregationInput = {
    id?: SortOrder
    item_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    _count?: item_permissionCountOrderByAggregateInput
    _avg?: item_permissionAvgOrderByAggregateInput
    _max?: item_permissionMaxOrderByAggregateInput
    _min?: item_permissionMinOrderByAggregateInput
    _sum?: item_permissionSumOrderByAggregateInput
  }

  export type item_permissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<item_permissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<item_permissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<item_permissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    item_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type userCreateInput = {
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
    item_permissions?: item_permissionCreateNestedManyWithoutUserInput
    list_permissions?: list_permissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
    item_permissions?: item_permissionUncheckedCreateNestedManyWithoutUserInput
    list_permissions?: list_permissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUpdateManyWithoutUserNestedInput
    list_permissions?: list_permissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUncheckedUpdateManyWithoutUserNestedInput
    list_permissions?: list_permissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type userUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type listCreateInput = {
    name: string
    description?: string | null
    owner_id: number
    passcode: string
    created_at?: Date | string
    list_permissions?: list_permissionCreateNestedManyWithoutListInput
    items?: itemCreateNestedManyWithoutListInput
  }

  export type listUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    owner_id: number
    passcode: string
    created_at?: Date | string
    list_permissions?: list_permissionUncheckedCreateNestedManyWithoutListInput
    items?: itemUncheckedCreateNestedManyWithoutListInput
  }

  export type listUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    list_permissions?: list_permissionUpdateManyWithoutListNestedInput
    items?: itemUpdateManyWithoutListNestedInput
  }

  export type listUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    list_permissions?: list_permissionUncheckedUpdateManyWithoutListNestedInput
    items?: itemUncheckedUpdateManyWithoutListNestedInput
  }

  export type listCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    owner_id: number
    passcode: string
    created_at?: Date | string
  }

  export type listUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type listUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionCreateInput = {
    list: listCreateNestedOneWithoutList_permissionsInput
    user: userCreateNestedOneWithoutList_permissionsInput
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type list_permissionUncheckedCreateInput = {
    id?: number
    list_id: number
    user_id: number
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type list_permissionUpdateInput = {
    list?: listUpdateOneRequiredWithoutList_permissionsNestedInput
    user?: userUpdateOneRequiredWithoutList_permissionsNestedInput
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    list_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionCreateManyInput = {
    id?: number
    list_id: number
    user_id: number
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type list_permissionUpdateManyMutationInput = {
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    list_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemCreateInput = {
    name: string
    description?: string | null
    category?: Category | null
    list?: listCreateNestedOneWithoutItemsInput
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    item_permissions?: item_permissionCreateNestedManyWithoutItemInput
    active?: boolean
  }

  export type itemUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    category?: Category | null
    category_id?: number | null
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    item_permissions?: item_permissionUncheckedCreateNestedManyWithoutItemInput
    active?: boolean
  }

  export type itemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    list?: listUpdateOneWithoutItemsNestedInput
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUpdateManyWithoutItemNestedInput
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type itemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUncheckedUpdateManyWithoutItemNestedInput
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type itemCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    category?: Category | null
    category_id?: number | null
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    active?: boolean
  }

  export type itemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type itemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type item_permissionCreateInput = {
    item: itemCreateNestedOneWithoutItem_permissionsInput
    user: userCreateNestedOneWithoutItem_permissionsInput
    created_at?: Date | string
  }

  export type item_permissionUncheckedCreateInput = {
    id?: number
    item_id: number
    user_id: number
    created_at?: Date | string
  }

  export type item_permissionUpdateInput = {
    item?: itemUpdateOneRequiredWithoutItem_permissionsNestedInput
    user?: userUpdateOneRequiredWithoutItem_permissionsNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type item_permissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    item_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type item_permissionCreateManyInput = {
    id?: number
    item_id: number
    user_id: number
    created_at?: Date | string
  }

  export type item_permissionUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type item_permissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    item_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Item_permissionListRelationFilter = {
    every?: item_permissionWhereInput
    some?: item_permissionWhereInput
    none?: item_permissionWhereInput
  }

  export type List_permissionListRelationFilter = {
    every?: list_permissionWhereInput
    some?: list_permissionWhereInput
    none?: list_permissionWhereInput
  }

  export type item_permissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type list_permissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type ItemListRelationFilter = {
    every?: itemWhereInput
    some?: itemWhereInput
    none?: itemWhereInput
  }

  export type itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type listCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    passcode?: SortOrder
    created_at?: SortOrder
  }

  export type listAvgOrderByAggregateInput = {
    id?: SortOrder
    owner_id?: SortOrder
  }

  export type listMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    passcode?: SortOrder
    created_at?: SortOrder
  }

  export type listMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    passcode?: SortOrder
    created_at?: SortOrder
  }

  export type listSumOrderByAggregateInput = {
    id?: SortOrder
    owner_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ListRelationFilter = {
    is?: listWhereInput
    isNot?: listWhereInput
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type EnumAccessLevelFilter = {
    equals?: AccessLevel
    in?: Enumerable<AccessLevel>
    notIn?: Enumerable<AccessLevel>
    not?: NestedEnumAccessLevelFilter | AccessLevel
  }

  export type list_permissionList_idUser_idCompoundUniqueInput = {
    list_id: number
    user_id: number
  }

  export type list_permissionCountOrderByAggregateInput = {
    id?: SortOrder
    list_id?: SortOrder
    user_id?: SortOrder
    permission?: SortOrder
    created_at?: SortOrder
  }

  export type list_permissionAvgOrderByAggregateInput = {
    id?: SortOrder
    list_id?: SortOrder
    user_id?: SortOrder
  }

  export type list_permissionMaxOrderByAggregateInput = {
    id?: SortOrder
    list_id?: SortOrder
    user_id?: SortOrder
    permission?: SortOrder
    created_at?: SortOrder
  }

  export type list_permissionMinOrderByAggregateInput = {
    id?: SortOrder
    list_id?: SortOrder
    user_id?: SortOrder
    permission?: SortOrder
    created_at?: SortOrder
  }

  export type list_permissionSumOrderByAggregateInput = {
    id?: SortOrder
    list_id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumAccessLevelWithAggregatesFilter = {
    equals?: AccessLevel
    in?: Enumerable<AccessLevel>
    notIn?: Enumerable<AccessLevel>
    not?: NestedEnumAccessLevelWithAggregatesFilter | AccessLevel
    _count?: NestedIntFilter
    _min?: NestedEnumAccessLevelFilter
    _max?: NestedEnumAccessLevelFilter
  }

  export type EnumCategoryNullableFilter = {
    equals?: Category | null
    in?: Enumerable<Category> | null
    notIn?: Enumerable<Category> | null
    not?: NestedEnumCategoryNullableFilter | Category | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type EnumItemTypeFilter = {
    equals?: ItemType
    in?: Enumerable<ItemType>
    notIn?: Enumerable<ItemType>
    not?: NestedEnumItemTypeFilter | ItemType
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumVisibilityLevelFilter = {
    equals?: VisibilityLevel
    in?: Enumerable<VisibilityLevel>
    notIn?: Enumerable<VisibilityLevel>
    not?: NestedEnumVisibilityLevelFilter | VisibilityLevel
  }

  export type itemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    category_id?: SortOrder
    item_type?: SortOrder
    date_tz_sensitive?: SortOrder
    date_tz_sensitive_end?: SortOrder
    time_sensitive_flag?: SortOrder
    date_range_flag?: SortOrder
    date_tz_insensitive?: SortOrder
    date_tz_insensitive_end?: SortOrder
    permission_level?: SortOrder
    created_by_id?: SortOrder
    last_modified_by_id?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type itemAvgOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    created_by_id?: SortOrder
    last_modified_by_id?: SortOrder
  }

  export type itemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    category_id?: SortOrder
    item_type?: SortOrder
    date_tz_sensitive?: SortOrder
    date_tz_sensitive_end?: SortOrder
    time_sensitive_flag?: SortOrder
    date_range_flag?: SortOrder
    date_tz_insensitive?: SortOrder
    date_tz_insensitive_end?: SortOrder
    permission_level?: SortOrder
    created_by_id?: SortOrder
    last_modified_by_id?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type itemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    category_id?: SortOrder
    item_type?: SortOrder
    date_tz_sensitive?: SortOrder
    date_tz_sensitive_end?: SortOrder
    time_sensitive_flag?: SortOrder
    date_range_flag?: SortOrder
    date_tz_insensitive?: SortOrder
    date_tz_insensitive_end?: SortOrder
    permission_level?: SortOrder
    created_by_id?: SortOrder
    last_modified_by_id?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type itemSumOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    created_by_id?: SortOrder
    last_modified_by_id?: SortOrder
  }

  export type EnumCategoryNullableWithAggregatesFilter = {
    equals?: Category | null
    in?: Enumerable<Category> | null
    notIn?: Enumerable<Category> | null
    not?: NestedEnumCategoryNullableWithAggregatesFilter | Category | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCategoryNullableFilter
    _max?: NestedEnumCategoryNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumItemTypeWithAggregatesFilter = {
    equals?: ItemType
    in?: Enumerable<ItemType>
    notIn?: Enumerable<ItemType>
    not?: NestedEnumItemTypeWithAggregatesFilter | ItemType
    _count?: NestedIntFilter
    _min?: NestedEnumItemTypeFilter
    _max?: NestedEnumItemTypeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumVisibilityLevelWithAggregatesFilter = {
    equals?: VisibilityLevel
    in?: Enumerable<VisibilityLevel>
    notIn?: Enumerable<VisibilityLevel>
    not?: NestedEnumVisibilityLevelWithAggregatesFilter | VisibilityLevel
    _count?: NestedIntFilter
    _min?: NestedEnumVisibilityLevelFilter
    _max?: NestedEnumVisibilityLevelFilter
  }

  export type ItemRelationFilter = {
    is?: itemWhereInput
    isNot?: itemWhereInput
  }

  export type item_permissionItem_idUser_idCompoundUniqueInput = {
    item_id: number
    user_id: number
  }

  export type item_permissionCountOrderByAggregateInput = {
    id?: SortOrder
    item_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type item_permissionAvgOrderByAggregateInput = {
    id?: SortOrder
    item_id?: SortOrder
    user_id?: SortOrder
  }

  export type item_permissionMaxOrderByAggregateInput = {
    id?: SortOrder
    item_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type item_permissionMinOrderByAggregateInput = {
    id?: SortOrder
    item_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type item_permissionSumOrderByAggregateInput = {
    id?: SortOrder
    item_id?: SortOrder
    user_id?: SortOrder
  }

  export type item_permissionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutUserInput>, Enumerable<item_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutUserInput>
    createMany?: item_permissionCreateManyUserInputEnvelope
    connect?: Enumerable<item_permissionWhereUniqueInput>
  }

  export type list_permissionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutUserInput>, Enumerable<list_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutUserInput>
    createMany?: list_permissionCreateManyUserInputEnvelope
    connect?: Enumerable<list_permissionWhereUniqueInput>
  }

  export type item_permissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutUserInput>, Enumerable<item_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutUserInput>
    createMany?: item_permissionCreateManyUserInputEnvelope
    connect?: Enumerable<item_permissionWhereUniqueInput>
  }

  export type list_permissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutUserInput>, Enumerable<list_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutUserInput>
    createMany?: list_permissionCreateManyUserInputEnvelope
    connect?: Enumerable<list_permissionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type item_permissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutUserInput>, Enumerable<item_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<item_permissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: item_permissionCreateManyUserInputEnvelope
    set?: Enumerable<item_permissionWhereUniqueInput>
    disconnect?: Enumerable<item_permissionWhereUniqueInput>
    delete?: Enumerable<item_permissionWhereUniqueInput>
    connect?: Enumerable<item_permissionWhereUniqueInput>
    update?: Enumerable<item_permissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<item_permissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<item_permissionScalarWhereInput>
  }

  export type list_permissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutUserInput>, Enumerable<list_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<list_permissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: list_permissionCreateManyUserInputEnvelope
    set?: Enumerable<list_permissionWhereUniqueInput>
    disconnect?: Enumerable<list_permissionWhereUniqueInput>
    delete?: Enumerable<list_permissionWhereUniqueInput>
    connect?: Enumerable<list_permissionWhereUniqueInput>
    update?: Enumerable<list_permissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<list_permissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<list_permissionScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type item_permissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutUserInput>, Enumerable<item_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<item_permissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: item_permissionCreateManyUserInputEnvelope
    set?: Enumerable<item_permissionWhereUniqueInput>
    disconnect?: Enumerable<item_permissionWhereUniqueInput>
    delete?: Enumerable<item_permissionWhereUniqueInput>
    connect?: Enumerable<item_permissionWhereUniqueInput>
    update?: Enumerable<item_permissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<item_permissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<item_permissionScalarWhereInput>
  }

  export type list_permissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutUserInput>, Enumerable<list_permissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<list_permissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: list_permissionCreateManyUserInputEnvelope
    set?: Enumerable<list_permissionWhereUniqueInput>
    disconnect?: Enumerable<list_permissionWhereUniqueInput>
    delete?: Enumerable<list_permissionWhereUniqueInput>
    connect?: Enumerable<list_permissionWhereUniqueInput>
    update?: Enumerable<list_permissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<list_permissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<list_permissionScalarWhereInput>
  }

  export type list_permissionCreateNestedManyWithoutListInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutListInput>, Enumerable<list_permissionUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutListInput>
    createMany?: list_permissionCreateManyListInputEnvelope
    connect?: Enumerable<list_permissionWhereUniqueInput>
  }

  export type itemCreateNestedManyWithoutListInput = {
    create?: XOR<Enumerable<itemCreateWithoutListInput>, Enumerable<itemUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutListInput>
    createMany?: itemCreateManyListInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type list_permissionUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutListInput>, Enumerable<list_permissionUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutListInput>
    createMany?: list_permissionCreateManyListInputEnvelope
    connect?: Enumerable<list_permissionWhereUniqueInput>
  }

  export type itemUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<Enumerable<itemCreateWithoutListInput>, Enumerable<itemUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutListInput>
    createMany?: itemCreateManyListInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type list_permissionUpdateManyWithoutListNestedInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutListInput>, Enumerable<list_permissionUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutListInput>
    upsert?: Enumerable<list_permissionUpsertWithWhereUniqueWithoutListInput>
    createMany?: list_permissionCreateManyListInputEnvelope
    set?: Enumerable<list_permissionWhereUniqueInput>
    disconnect?: Enumerable<list_permissionWhereUniqueInput>
    delete?: Enumerable<list_permissionWhereUniqueInput>
    connect?: Enumerable<list_permissionWhereUniqueInput>
    update?: Enumerable<list_permissionUpdateWithWhereUniqueWithoutListInput>
    updateMany?: Enumerable<list_permissionUpdateManyWithWhereWithoutListInput>
    deleteMany?: Enumerable<list_permissionScalarWhereInput>
  }

  export type itemUpdateManyWithoutListNestedInput = {
    create?: XOR<Enumerable<itemCreateWithoutListInput>, Enumerable<itemUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutListInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutListInput>
    createMany?: itemCreateManyListInputEnvelope
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    connect?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutListInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutListInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type list_permissionUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<Enumerable<list_permissionCreateWithoutListInput>, Enumerable<list_permissionUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<list_permissionCreateOrConnectWithoutListInput>
    upsert?: Enumerable<list_permissionUpsertWithWhereUniqueWithoutListInput>
    createMany?: list_permissionCreateManyListInputEnvelope
    set?: Enumerable<list_permissionWhereUniqueInput>
    disconnect?: Enumerable<list_permissionWhereUniqueInput>
    delete?: Enumerable<list_permissionWhereUniqueInput>
    connect?: Enumerable<list_permissionWhereUniqueInput>
    update?: Enumerable<list_permissionUpdateWithWhereUniqueWithoutListInput>
    updateMany?: Enumerable<list_permissionUpdateManyWithWhereWithoutListInput>
    deleteMany?: Enumerable<list_permissionScalarWhereInput>
  }

  export type itemUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<Enumerable<itemCreateWithoutListInput>, Enumerable<itemUncheckedCreateWithoutListInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutListInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutListInput>
    createMany?: itemCreateManyListInputEnvelope
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    connect?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutListInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutListInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type listCreateNestedOneWithoutList_permissionsInput = {
    create?: XOR<listCreateWithoutList_permissionsInput, listUncheckedCreateWithoutList_permissionsInput>
    connectOrCreate?: listCreateOrConnectWithoutList_permissionsInput
    connect?: listWhereUniqueInput
  }

  export type userCreateNestedOneWithoutList_permissionsInput = {
    create?: XOR<userCreateWithoutList_permissionsInput, userUncheckedCreateWithoutList_permissionsInput>
    connectOrCreate?: userCreateOrConnectWithoutList_permissionsInput
    connect?: userWhereUniqueInput
  }

  export type listUpdateOneRequiredWithoutList_permissionsNestedInput = {
    create?: XOR<listCreateWithoutList_permissionsInput, listUncheckedCreateWithoutList_permissionsInput>
    connectOrCreate?: listCreateOrConnectWithoutList_permissionsInput
    upsert?: listUpsertWithoutList_permissionsInput
    connect?: listWhereUniqueInput
    update?: XOR<listUpdateWithoutList_permissionsInput, listUncheckedUpdateWithoutList_permissionsInput>
  }

  export type userUpdateOneRequiredWithoutList_permissionsNestedInput = {
    create?: XOR<userCreateWithoutList_permissionsInput, userUncheckedCreateWithoutList_permissionsInput>
    connectOrCreate?: userCreateOrConnectWithoutList_permissionsInput
    upsert?: userUpsertWithoutList_permissionsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutList_permissionsInput, userUncheckedUpdateWithoutList_permissionsInput>
  }

  export type EnumAccessLevelFieldUpdateOperationsInput = {
    set?: AccessLevel
  }

  export type listCreateNestedOneWithoutItemsInput = {
    create?: XOR<listCreateWithoutItemsInput, listUncheckedCreateWithoutItemsInput>
    connectOrCreate?: listCreateOrConnectWithoutItemsInput
    connect?: listWhereUniqueInput
  }

  export type item_permissionCreateNestedManyWithoutItemInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutItemInput>, Enumerable<item_permissionUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutItemInput>
    createMany?: item_permissionCreateManyItemInputEnvelope
    connect?: Enumerable<item_permissionWhereUniqueInput>
  }

  export type item_permissionUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutItemInput>, Enumerable<item_permissionUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutItemInput>
    createMany?: item_permissionCreateManyItemInputEnvelope
    connect?: Enumerable<item_permissionWhereUniqueInput>
  }

  export type NullableEnumCategoryFieldUpdateOperationsInput = {
    set?: Category | null
  }

  export type listUpdateOneWithoutItemsNestedInput = {
    create?: XOR<listCreateWithoutItemsInput, listUncheckedCreateWithoutItemsInput>
    connectOrCreate?: listCreateOrConnectWithoutItemsInput
    upsert?: listUpsertWithoutItemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: listWhereUniqueInput
    update?: XOR<listUpdateWithoutItemsInput, listUncheckedUpdateWithoutItemsInput>
  }

  export type EnumItemTypeFieldUpdateOperationsInput = {
    set?: ItemType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumVisibilityLevelFieldUpdateOperationsInput = {
    set?: VisibilityLevel
  }

  export type item_permissionUpdateManyWithoutItemNestedInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutItemInput>, Enumerable<item_permissionUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutItemInput>
    upsert?: Enumerable<item_permissionUpsertWithWhereUniqueWithoutItemInput>
    createMany?: item_permissionCreateManyItemInputEnvelope
    set?: Enumerable<item_permissionWhereUniqueInput>
    disconnect?: Enumerable<item_permissionWhereUniqueInput>
    delete?: Enumerable<item_permissionWhereUniqueInput>
    connect?: Enumerable<item_permissionWhereUniqueInput>
    update?: Enumerable<item_permissionUpdateWithWhereUniqueWithoutItemInput>
    updateMany?: Enumerable<item_permissionUpdateManyWithWhereWithoutItemInput>
    deleteMany?: Enumerable<item_permissionScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type item_permissionUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<Enumerable<item_permissionCreateWithoutItemInput>, Enumerable<item_permissionUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<item_permissionCreateOrConnectWithoutItemInput>
    upsert?: Enumerable<item_permissionUpsertWithWhereUniqueWithoutItemInput>
    createMany?: item_permissionCreateManyItemInputEnvelope
    set?: Enumerable<item_permissionWhereUniqueInput>
    disconnect?: Enumerable<item_permissionWhereUniqueInput>
    delete?: Enumerable<item_permissionWhereUniqueInput>
    connect?: Enumerable<item_permissionWhereUniqueInput>
    update?: Enumerable<item_permissionUpdateWithWhereUniqueWithoutItemInput>
    updateMany?: Enumerable<item_permissionUpdateManyWithWhereWithoutItemInput>
    deleteMany?: Enumerable<item_permissionScalarWhereInput>
  }

  export type itemCreateNestedOneWithoutItem_permissionsInput = {
    create?: XOR<itemCreateWithoutItem_permissionsInput, itemUncheckedCreateWithoutItem_permissionsInput>
    connectOrCreate?: itemCreateOrConnectWithoutItem_permissionsInput
    connect?: itemWhereUniqueInput
  }

  export type userCreateNestedOneWithoutItem_permissionsInput = {
    create?: XOR<userCreateWithoutItem_permissionsInput, userUncheckedCreateWithoutItem_permissionsInput>
    connectOrCreate?: userCreateOrConnectWithoutItem_permissionsInput
    connect?: userWhereUniqueInput
  }

  export type itemUpdateOneRequiredWithoutItem_permissionsNestedInput = {
    create?: XOR<itemCreateWithoutItem_permissionsInput, itemUncheckedCreateWithoutItem_permissionsInput>
    connectOrCreate?: itemCreateOrConnectWithoutItem_permissionsInput
    upsert?: itemUpsertWithoutItem_permissionsInput
    connect?: itemWhereUniqueInput
    update?: XOR<itemUpdateWithoutItem_permissionsInput, itemUncheckedUpdateWithoutItem_permissionsInput>
  }

  export type userUpdateOneRequiredWithoutItem_permissionsNestedInput = {
    create?: XOR<userCreateWithoutItem_permissionsInput, userUncheckedCreateWithoutItem_permissionsInput>
    connectOrCreate?: userCreateOrConnectWithoutItem_permissionsInput
    upsert?: userUpsertWithoutItem_permissionsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutItem_permissionsInput, userUncheckedUpdateWithoutItem_permissionsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumAccessLevelFilter = {
    equals?: AccessLevel
    in?: Enumerable<AccessLevel>
    notIn?: Enumerable<AccessLevel>
    not?: NestedEnumAccessLevelFilter | AccessLevel
  }

  export type NestedEnumAccessLevelWithAggregatesFilter = {
    equals?: AccessLevel
    in?: Enumerable<AccessLevel>
    notIn?: Enumerable<AccessLevel>
    not?: NestedEnumAccessLevelWithAggregatesFilter | AccessLevel
    _count?: NestedIntFilter
    _min?: NestedEnumAccessLevelFilter
    _max?: NestedEnumAccessLevelFilter
  }

  export type NestedEnumCategoryNullableFilter = {
    equals?: Category | null
    in?: Enumerable<Category> | null
    notIn?: Enumerable<Category> | null
    not?: NestedEnumCategoryNullableFilter | Category | null
  }

  export type NestedEnumItemTypeFilter = {
    equals?: ItemType
    in?: Enumerable<ItemType>
    notIn?: Enumerable<ItemType>
    not?: NestedEnumItemTypeFilter | ItemType
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumVisibilityLevelFilter = {
    equals?: VisibilityLevel
    in?: Enumerable<VisibilityLevel>
    notIn?: Enumerable<VisibilityLevel>
    not?: NestedEnumVisibilityLevelFilter | VisibilityLevel
  }

  export type NestedEnumCategoryNullableWithAggregatesFilter = {
    equals?: Category | null
    in?: Enumerable<Category> | null
    notIn?: Enumerable<Category> | null
    not?: NestedEnumCategoryNullableWithAggregatesFilter | Category | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCategoryNullableFilter
    _max?: NestedEnumCategoryNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumItemTypeWithAggregatesFilter = {
    equals?: ItemType
    in?: Enumerable<ItemType>
    notIn?: Enumerable<ItemType>
    not?: NestedEnumItemTypeWithAggregatesFilter | ItemType
    _count?: NestedIntFilter
    _min?: NestedEnumItemTypeFilter
    _max?: NestedEnumItemTypeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumVisibilityLevelWithAggregatesFilter = {
    equals?: VisibilityLevel
    in?: Enumerable<VisibilityLevel>
    notIn?: Enumerable<VisibilityLevel>
    not?: NestedEnumVisibilityLevelWithAggregatesFilter | VisibilityLevel
    _count?: NestedIntFilter
    _min?: NestedEnumVisibilityLevelFilter
    _max?: NestedEnumVisibilityLevelFilter
  }

  export type item_permissionCreateWithoutUserInput = {
    item: itemCreateNestedOneWithoutItem_permissionsInput
    created_at?: Date | string
  }

  export type item_permissionUncheckedCreateWithoutUserInput = {
    id?: number
    item_id: number
    created_at?: Date | string
  }

  export type item_permissionCreateOrConnectWithoutUserInput = {
    where: item_permissionWhereUniqueInput
    create: XOR<item_permissionCreateWithoutUserInput, item_permissionUncheckedCreateWithoutUserInput>
  }

  export type item_permissionCreateManyUserInputEnvelope = {
    data: Enumerable<item_permissionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type list_permissionCreateWithoutUserInput = {
    list: listCreateNestedOneWithoutList_permissionsInput
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type list_permissionUncheckedCreateWithoutUserInput = {
    id?: number
    list_id: number
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type list_permissionCreateOrConnectWithoutUserInput = {
    where: list_permissionWhereUniqueInput
    create: XOR<list_permissionCreateWithoutUserInput, list_permissionUncheckedCreateWithoutUserInput>
  }

  export type list_permissionCreateManyUserInputEnvelope = {
    data: Enumerable<list_permissionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type item_permissionUpsertWithWhereUniqueWithoutUserInput = {
    where: item_permissionWhereUniqueInput
    update: XOR<item_permissionUpdateWithoutUserInput, item_permissionUncheckedUpdateWithoutUserInput>
    create: XOR<item_permissionCreateWithoutUserInput, item_permissionUncheckedCreateWithoutUserInput>
  }

  export type item_permissionUpdateWithWhereUniqueWithoutUserInput = {
    where: item_permissionWhereUniqueInput
    data: XOR<item_permissionUpdateWithoutUserInput, item_permissionUncheckedUpdateWithoutUserInput>
  }

  export type item_permissionUpdateManyWithWhereWithoutUserInput = {
    where: item_permissionScalarWhereInput
    data: XOR<item_permissionUpdateManyMutationInput, item_permissionUncheckedUpdateManyWithoutItem_permissionsInput>
  }

  export type item_permissionScalarWhereInput = {
    AND?: Enumerable<item_permissionScalarWhereInput>
    OR?: Enumerable<item_permissionScalarWhereInput>
    NOT?: Enumerable<item_permissionScalarWhereInput>
    id?: IntFilter | number
    item_id?: IntFilter | number
    user_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type list_permissionUpsertWithWhereUniqueWithoutUserInput = {
    where: list_permissionWhereUniqueInput
    update: XOR<list_permissionUpdateWithoutUserInput, list_permissionUncheckedUpdateWithoutUserInput>
    create: XOR<list_permissionCreateWithoutUserInput, list_permissionUncheckedCreateWithoutUserInput>
  }

  export type list_permissionUpdateWithWhereUniqueWithoutUserInput = {
    where: list_permissionWhereUniqueInput
    data: XOR<list_permissionUpdateWithoutUserInput, list_permissionUncheckedUpdateWithoutUserInput>
  }

  export type list_permissionUpdateManyWithWhereWithoutUserInput = {
    where: list_permissionScalarWhereInput
    data: XOR<list_permissionUpdateManyMutationInput, list_permissionUncheckedUpdateManyWithoutList_permissionsInput>
  }

  export type list_permissionScalarWhereInput = {
    AND?: Enumerable<list_permissionScalarWhereInput>
    OR?: Enumerable<list_permissionScalarWhereInput>
    NOT?: Enumerable<list_permissionScalarWhereInput>
    id?: IntFilter | number
    list_id?: IntFilter | number
    user_id?: IntFilter | number
    permission?: EnumAccessLevelFilter | AccessLevel
    created_at?: DateTimeFilter | Date | string
  }

  export type list_permissionCreateWithoutListInput = {
    user: userCreateNestedOneWithoutList_permissionsInput
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type list_permissionUncheckedCreateWithoutListInput = {
    id?: number
    user_id: number
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type list_permissionCreateOrConnectWithoutListInput = {
    where: list_permissionWhereUniqueInput
    create: XOR<list_permissionCreateWithoutListInput, list_permissionUncheckedCreateWithoutListInput>
  }

  export type list_permissionCreateManyListInputEnvelope = {
    data: Enumerable<list_permissionCreateManyListInput>
    skipDuplicates?: boolean
  }

  export type itemCreateWithoutListInput = {
    name: string
    description?: string | null
    category?: Category | null
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    item_permissions?: item_permissionCreateNestedManyWithoutItemInput
    active?: boolean
  }

  export type itemUncheckedCreateWithoutListInput = {
    id?: number
    name: string
    description?: string | null
    category?: Category | null
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    item_permissions?: item_permissionUncheckedCreateNestedManyWithoutItemInput
    active?: boolean
  }

  export type itemCreateOrConnectWithoutListInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutListInput, itemUncheckedCreateWithoutListInput>
  }

  export type itemCreateManyListInputEnvelope = {
    data: Enumerable<itemCreateManyListInput>
    skipDuplicates?: boolean
  }

  export type list_permissionUpsertWithWhereUniqueWithoutListInput = {
    where: list_permissionWhereUniqueInput
    update: XOR<list_permissionUpdateWithoutListInput, list_permissionUncheckedUpdateWithoutListInput>
    create: XOR<list_permissionCreateWithoutListInput, list_permissionUncheckedCreateWithoutListInput>
  }

  export type list_permissionUpdateWithWhereUniqueWithoutListInput = {
    where: list_permissionWhereUniqueInput
    data: XOR<list_permissionUpdateWithoutListInput, list_permissionUncheckedUpdateWithoutListInput>
  }

  export type list_permissionUpdateManyWithWhereWithoutListInput = {
    where: list_permissionScalarWhereInput
    data: XOR<list_permissionUpdateManyMutationInput, list_permissionUncheckedUpdateManyWithoutList_permissionsInput>
  }

  export type itemUpsertWithWhereUniqueWithoutListInput = {
    where: itemWhereUniqueInput
    update: XOR<itemUpdateWithoutListInput, itemUncheckedUpdateWithoutListInput>
    create: XOR<itemCreateWithoutListInput, itemUncheckedCreateWithoutListInput>
  }

  export type itemUpdateWithWhereUniqueWithoutListInput = {
    where: itemWhereUniqueInput
    data: XOR<itemUpdateWithoutListInput, itemUncheckedUpdateWithoutListInput>
  }

  export type itemUpdateManyWithWhereWithoutListInput = {
    where: itemScalarWhereInput
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyWithoutItemsInput>
  }

  export type itemScalarWhereInput = {
    AND?: Enumerable<itemScalarWhereInput>
    OR?: Enumerable<itemScalarWhereInput>
    NOT?: Enumerable<itemScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    category?: EnumCategoryNullableFilter | Category | null
    category_id?: IntNullableFilter | number | null
    item_type?: EnumItemTypeFilter | ItemType
    date_tz_sensitive?: DateTimeNullableFilter | Date | string | null
    date_tz_sensitive_end?: DateTimeNullableFilter | Date | string | null
    time_sensitive_flag?: BoolFilter | boolean
    date_range_flag?: BoolFilter | boolean
    date_tz_insensitive?: StringNullableFilter | string | null
    date_tz_insensitive_end?: StringNullableFilter | string | null
    permission_level?: EnumVisibilityLevelFilter | VisibilityLevel
    created_by_id?: IntFilter | number
    last_modified_by_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    active?: BoolFilter | boolean
  }

  export type listCreateWithoutList_permissionsInput = {
    name: string
    description?: string | null
    owner_id: number
    passcode: string
    created_at?: Date | string
    items?: itemCreateNestedManyWithoutListInput
  }

  export type listUncheckedCreateWithoutList_permissionsInput = {
    id?: number
    name: string
    description?: string | null
    owner_id: number
    passcode: string
    created_at?: Date | string
    items?: itemUncheckedCreateNestedManyWithoutListInput
  }

  export type listCreateOrConnectWithoutList_permissionsInput = {
    where: listWhereUniqueInput
    create: XOR<listCreateWithoutList_permissionsInput, listUncheckedCreateWithoutList_permissionsInput>
  }

  export type userCreateWithoutList_permissionsInput = {
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
    item_permissions?: item_permissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutList_permissionsInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
    item_permissions?: item_permissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutList_permissionsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutList_permissionsInput, userUncheckedCreateWithoutList_permissionsInput>
  }

  export type listUpsertWithoutList_permissionsInput = {
    update: XOR<listUpdateWithoutList_permissionsInput, listUncheckedUpdateWithoutList_permissionsInput>
    create: XOR<listCreateWithoutList_permissionsInput, listUncheckedCreateWithoutList_permissionsInput>
  }

  export type listUpdateWithoutList_permissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemUpdateManyWithoutListNestedInput
  }

  export type listUncheckedUpdateWithoutList_permissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemUncheckedUpdateManyWithoutListNestedInput
  }

  export type userUpsertWithoutList_permissionsInput = {
    update: XOR<userUpdateWithoutList_permissionsInput, userUncheckedUpdateWithoutList_permissionsInput>
    create: XOR<userCreateWithoutList_permissionsInput, userUncheckedCreateWithoutList_permissionsInput>
  }

  export type userUpdateWithoutList_permissionsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutList_permissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type listCreateWithoutItemsInput = {
    name: string
    description?: string | null
    owner_id: number
    passcode: string
    created_at?: Date | string
    list_permissions?: list_permissionCreateNestedManyWithoutListInput
  }

  export type listUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    description?: string | null
    owner_id: number
    passcode: string
    created_at?: Date | string
    list_permissions?: list_permissionUncheckedCreateNestedManyWithoutListInput
  }

  export type listCreateOrConnectWithoutItemsInput = {
    where: listWhereUniqueInput
    create: XOR<listCreateWithoutItemsInput, listUncheckedCreateWithoutItemsInput>
  }

  export type item_permissionCreateWithoutItemInput = {
    user: userCreateNestedOneWithoutItem_permissionsInput
    created_at?: Date | string
  }

  export type item_permissionUncheckedCreateWithoutItemInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type item_permissionCreateOrConnectWithoutItemInput = {
    where: item_permissionWhereUniqueInput
    create: XOR<item_permissionCreateWithoutItemInput, item_permissionUncheckedCreateWithoutItemInput>
  }

  export type item_permissionCreateManyItemInputEnvelope = {
    data: Enumerable<item_permissionCreateManyItemInput>
    skipDuplicates?: boolean
  }

  export type listUpsertWithoutItemsInput = {
    update: XOR<listUpdateWithoutItemsInput, listUncheckedUpdateWithoutItemsInput>
    create: XOR<listCreateWithoutItemsInput, listUncheckedCreateWithoutItemsInput>
  }

  export type listUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    list_permissions?: list_permissionUpdateManyWithoutListNestedInput
  }

  export type listUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: IntFieldUpdateOperationsInput | number
    passcode?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    list_permissions?: list_permissionUncheckedUpdateManyWithoutListNestedInput
  }

  export type item_permissionUpsertWithWhereUniqueWithoutItemInput = {
    where: item_permissionWhereUniqueInput
    update: XOR<item_permissionUpdateWithoutItemInput, item_permissionUncheckedUpdateWithoutItemInput>
    create: XOR<item_permissionCreateWithoutItemInput, item_permissionUncheckedCreateWithoutItemInput>
  }

  export type item_permissionUpdateWithWhereUniqueWithoutItemInput = {
    where: item_permissionWhereUniqueInput
    data: XOR<item_permissionUpdateWithoutItemInput, item_permissionUncheckedUpdateWithoutItemInput>
  }

  export type item_permissionUpdateManyWithWhereWithoutItemInput = {
    where: item_permissionScalarWhereInput
    data: XOR<item_permissionUpdateManyMutationInput, item_permissionUncheckedUpdateManyWithoutItem_permissionsInput>
  }

  export type itemCreateWithoutItem_permissionsInput = {
    name: string
    description?: string | null
    category?: Category | null
    list?: listCreateNestedOneWithoutItemsInput
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    active?: boolean
  }

  export type itemUncheckedCreateWithoutItem_permissionsInput = {
    id?: number
    name: string
    description?: string | null
    category?: Category | null
    category_id?: number | null
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    active?: boolean
  }

  export type itemCreateOrConnectWithoutItem_permissionsInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutItem_permissionsInput, itemUncheckedCreateWithoutItem_permissionsInput>
  }

  export type userCreateWithoutItem_permissionsInput = {
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
    list_permissions?: list_permissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutItem_permissionsInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
    list_permissions?: list_permissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutItem_permissionsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutItem_permissionsInput, userUncheckedCreateWithoutItem_permissionsInput>
  }

  export type itemUpsertWithoutItem_permissionsInput = {
    update: XOR<itemUpdateWithoutItem_permissionsInput, itemUncheckedUpdateWithoutItem_permissionsInput>
    create: XOR<itemCreateWithoutItem_permissionsInput, itemUncheckedCreateWithoutItem_permissionsInput>
  }

  export type itemUpdateWithoutItem_permissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    list?: listUpdateOneWithoutItemsNestedInput
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type itemUncheckedUpdateWithoutItem_permissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUpsertWithoutItem_permissionsInput = {
    update: XOR<userUpdateWithoutItem_permissionsInput, userUncheckedUpdateWithoutItem_permissionsInput>
    create: XOR<userCreateWithoutItem_permissionsInput, userUncheckedCreateWithoutItem_permissionsInput>
  }

  export type userUpdateWithoutItem_permissionsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    list_permissions?: list_permissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutItem_permissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    list_permissions?: list_permissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type item_permissionCreateManyUserInput = {
    id?: number
    item_id: number
    created_at?: Date | string
  }

  export type list_permissionCreateManyUserInput = {
    id?: number
    list_id: number
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type item_permissionUpdateWithoutUserInput = {
    item?: itemUpdateOneRequiredWithoutItem_permissionsNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type item_permissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    item_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type item_permissionUncheckedUpdateManyWithoutItem_permissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    item_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionUpdateWithoutUserInput = {
    list?: listUpdateOneRequiredWithoutList_permissionsNestedInput
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    list_id?: IntFieldUpdateOperationsInput | number
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionUncheckedUpdateManyWithoutList_permissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    list_id?: IntFieldUpdateOperationsInput | number
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionCreateManyListInput = {
    id?: number
    user_id: number
    permission?: AccessLevel
    created_at?: Date | string
  }

  export type itemCreateManyListInput = {
    id?: number
    name: string
    description?: string | null
    category?: Category | null
    item_type?: ItemType
    date_tz_sensitive?: Date | string | null
    date_tz_sensitive_end?: Date | string | null
    time_sensitive_flag?: boolean
    date_range_flag?: boolean
    date_tz_insensitive?: string | null
    date_tz_insensitive_end?: string | null
    permission_level?: VisibilityLevel
    created_by_id: number
    last_modified_by_id: number
    created_at?: Date | string
    active?: boolean
  }

  export type list_permissionUpdateWithoutListInput = {
    user?: userUpdateOneRequiredWithoutList_permissionsNestedInput
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type list_permissionUncheckedUpdateWithoutListInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    permission?: EnumAccessLevelFieldUpdateOperationsInput | AccessLevel
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemUpdateWithoutListInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUpdateManyWithoutItemNestedInput
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type itemUncheckedUpdateWithoutListInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    item_permissions?: item_permissionUncheckedUpdateManyWithoutItemNestedInput
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type itemUncheckedUpdateManyWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumCategoryFieldUpdateOperationsInput | Category | null
    item_type?: EnumItemTypeFieldUpdateOperationsInput | ItemType
    date_tz_sensitive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_tz_sensitive_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_sensitive_flag?: BoolFieldUpdateOperationsInput | boolean
    date_range_flag?: BoolFieldUpdateOperationsInput | boolean
    date_tz_insensitive?: NullableStringFieldUpdateOperationsInput | string | null
    date_tz_insensitive_end?: NullableStringFieldUpdateOperationsInput | string | null
    permission_level?: EnumVisibilityLevelFieldUpdateOperationsInput | VisibilityLevel
    created_by_id?: IntFieldUpdateOperationsInput | number
    last_modified_by_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type item_permissionCreateManyItemInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type item_permissionUpdateWithoutItemInput = {
    user?: userUpdateOneRequiredWithoutItem_permissionsNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type item_permissionUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}